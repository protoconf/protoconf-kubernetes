syntax = "proto3";

// Provider: kubernetes 2.20.0
package terraform.kubernetes.resources.v2;

import "terraform/v1/meta.proto";

// KubernetesMutatingWebhookConfiguration version is 0
message KubernetesMutatingWebhookConfiguration {
  string id = 1;

  Metadata metadata = 2;

  repeated Webhook webhook = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the mutating webhook configuration that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the mutating webhook configuration. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the mutating webhook configuration, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // An opaque value that represents the internal version of this mutating webhook configuration that can be used by clients to determine when mutating webhook configuration has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 6 [json_name = "resource_version"];

    // The unique in time and space value for this mutating webhook configuration. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 7;
  }

  message Webhook {
    // AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
    repeated string admission_review_versions = 1 [json_name = "admission_review_versions"];

    // FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
    string failure_policy = 2 [json_name = "failure_policy"];

    // matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
    //
    // - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
    //
    // - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
    //
    // Defaults to "Equivalent"
    string match_policy = 3 [json_name = "match_policy"];

    // The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
    string name = 4;

    // reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
    //
    // Never: the webhook will not be called more than once in a single admission evaluation.
    //
    // IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
    //
    // Defaults to "Never".
    string reinvocation_policy = 5 [json_name = "reinvocation_policy"];

    // SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
    string side_effects = 6 [json_name = "side_effects"];

    // TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
    int64 timeout_seconds = 7 [json_name = "timeout_seconds"];

    ClientConfig client_config = 8 [json_name = "client_config"];

    NamespaceSelector namespace_selector = 9 [json_name = "namespace_selector"];

    ObjectSelector object_selector = 10 [json_name = "object_selector"];

    repeated Rule rule = 11;

    message ClientConfig {
      // `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
      string ca_bundle = 1 [json_name = "ca_bundle"];

      // `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
      //
      // The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
      //
      // Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
      //
      // The scheme must be "https"; the URL must begin with "https://".
      //
      // A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
      //
      // Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
      string url = 2;

      Service service = 3;

      message Service {
        // `name` is the name of the service. Required
        string name = 1;

        // `namespace` is the namespace of the service. Required
        string namespace = 2;

        // `path` is an optional URL path which will be sent in any request to this service.
        string path = 3;

        // If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
        int64 port = 4;
      }
    }

    message NamespaceSelector {
      // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
      map<string, string> match_labels = 1 [json_name = "match_labels"];

      repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

      message MatchExpressions {
        // The label key that the selector applies to.
        string key = 1;

        // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        string operator = 2;

        // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        repeated string values = 3;
      }
    }

    message ObjectSelector {
      // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
      map<string, string> match_labels = 1 [json_name = "match_labels"];

      repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

      message MatchExpressions {
        // The label key that the selector applies to.
        string key = 1;

        // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        string operator = 2;

        // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        repeated string values = 3;
      }
    }

    message Rule {
      repeated string api_groups = 1 [json_name = "api_groups"];

      repeated string api_versions = 2 [json_name = "api_versions"];

      // Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
      repeated string operations = 3;

      repeated string resources = 4;

      string scope = 5;
    }
  }
}

// KubernetesMutatingWebhookConfigurationV1 version is 0
message KubernetesMutatingWebhookConfigurationV1 {
  string id = 1;

  Metadata metadata = 2;

  repeated Webhook webhook = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the mutating webhook configuration that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the mutating webhook configuration. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the mutating webhook configuration, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // An opaque value that represents the internal version of this mutating webhook configuration that can be used by clients to determine when mutating webhook configuration has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 6 [json_name = "resource_version"];

    // The unique in time and space value for this mutating webhook configuration. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 7;
  }

  message Webhook {
    // AdmissionReviewVersions is an ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.
    repeated string admission_review_versions = 1 [json_name = "admission_review_versions"];

    // FailurePolicy defines how unrecognized errors from the admission endpoint are handled - allowed values are Ignore or Fail. Defaults to Fail.
    string failure_policy = 2 [json_name = "failure_policy"];

    // matchPolicy defines how the "rules" list is used to match incoming requests. Allowed values are "Exact" or "Equivalent".
    //
    // - Exact: match a request only if it exactly matches a specified rule. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, but "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would not be sent to the webhook.
    //
    // - Equivalent: match a request if modifies a resource listed in rules, even via another API group or version. For example, if deployments can be modified via apps/v1, apps/v1beta1, and extensions/v1beta1, and "rules" only included `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to apps/v1beta1 or extensions/v1beta1 would be converted to apps/v1 and sent to the webhook.
    //
    // Defaults to "Equivalent"
    string match_policy = 3 [json_name = "match_policy"];

    // The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where "imagepolicy" is the name of the webhook, and kubernetes.io is the name of the organization. Required.
    string name = 4;

    // reinvocationPolicy indicates whether this webhook should be called multiple times as part of a single admission evaluation. Allowed values are "Never" and "IfNeeded".
    //
    // Never: the webhook will not be called more than once in a single admission evaluation.
    //
    // IfNeeded: the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: * the number of additional invocations is not guaranteed to be exactly one. * if additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. * webhooks that use this option may be reordered to minimize the number of additional invocations. * to validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.
    //
    // Defaults to "Never".
    string reinvocation_policy = 5 [json_name = "reinvocation_policy"];

    // SideEffects states whether this webhook has side effects. Acceptable values are: None, NoneOnDryRun (webhooks created via v1beta1 may also specify Some or Unknown). Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission chain and the side effects therefore need to be undone. Requests with the dryRun attribute will be auto-rejected if they match a webhook with sideEffects == Unknown or Some.
    string side_effects = 6 [json_name = "side_effects"];

    // TimeoutSeconds specifies the timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the failure policy. The timeout value must be between 1 and 30 seconds. Default to 10 seconds.
    int64 timeout_seconds = 7 [json_name = "timeout_seconds"];

    ClientConfig client_config = 8 [json_name = "client_config"];

    NamespaceSelector namespace_selector = 9 [json_name = "namespace_selector"];

    ObjectSelector object_selector = 10 [json_name = "object_selector"];

    repeated Rule rule = 11;

    message ClientConfig {
      // `caBundle` is a PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.
      string ca_bundle = 1 [json_name = "ca_bundle"];

      // `url` gives the location of the webhook, in standard URL form (`scheme://host:port/path`). Exactly one of `url` or `service` must be specified.
      //
      // The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address.
      //
      // Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
      //
      // The scheme must be "https"; the URL must begin with "https://".
      //
      // A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
      //
      // Attempting to use a user or basic auth e.g. "user:password@" is not allowed. Fragments ("#...") and query parameters ("?...") are not allowed, either.
      string url = 2;

      Service service = 3;

      message Service {
        // `name` is the name of the service. Required
        string name = 1;

        // `namespace` is the namespace of the service. Required
        string namespace = 2;

        // `path` is an optional URL path which will be sent in any request to this service.
        string path = 3;

        // If specified, the port on the service that hosting webhook. Default to 443 for backward compatibility. `port` should be a valid port number (1-65535, inclusive).
        int64 port = 4;
      }
    }

    message NamespaceSelector {
      // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
      map<string, string> match_labels = 1 [json_name = "match_labels"];

      repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

      message MatchExpressions {
        // The label key that the selector applies to.
        string key = 1;

        // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        string operator = 2;

        // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        repeated string values = 3;
      }
    }

    message ObjectSelector {
      // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
      map<string, string> match_labels = 1 [json_name = "match_labels"];

      repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

      message MatchExpressions {
        // The label key that the selector applies to.
        string key = 1;

        // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        string operator = 2;

        // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        repeated string values = 3;
      }
    }

    message Rule {
      repeated string api_groups = 1 [json_name = "api_groups"];

      repeated string api_versions = 2 [json_name = "api_versions"];

      // Operations is the operations the admission hook cares about - CREATE, UPDATE, DELETE, CONNECT or * for all of those operations and any future admission operations that are added. If '*' is present, the length of the slice must be one. Required.
      repeated string operations = 3;

      repeated string resources = 4;

      string scope = 5;
    }
  }
}
