syntax = "proto3";

// Provider: kubernetes 2.20.0
package terraform.kubernetes.resources.v2;

import "terraform/v1/meta.proto";

// KubernetesIngress version is 1
message KubernetesIngress {
  string id = 1;

  repeated Status status = 2;

  // Terraform will wait for the load balancer to have at least 1 endpoint before considering the resource created.
  bool wait_for_load_balancer = 3 [json_name = "wait_for_load_balancer"];

  Metadata metadata = 4;

  Spec spec = 5;

  map<string, string> for_each = 6 [json_name = "for_each"];

  repeated string depends_on = 7 [json_name = "depends_on"];

  int32 count = 8;

  string provider = 9;

  terraform.v1.Lifecycle lifecycle = 10;

  message Status {
    // load_balancer: list of object
    repeated LoadBalancer load_balancer = 1 [json_name = "load_balancer"];

    message LoadBalancer {
      // ingress: list of object
      repeated Ingress ingress = 1;

      message Ingress {
        // hostname: string
        string hostname = 1;

        // ip: string
        string ip = 2;
      }
    }
  }

  message Metadata {
    // An unstructured key value map stored with the ingress that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the ingress. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the ingress, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the ingress must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this ingress that can be used by clients to determine when ingress has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this ingress. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    // IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
    string ingress_class_name = 1 [json_name = "ingress_class_name"];

    Backend backend = 2;

    repeated Rule rule = 3;

    repeated Tls tls = 4;

    message Backend {
      // Specifies the name of the referenced service.
      string service_name = 1 [json_name = "service_name"];

      // Specifies the port of the referenced service.
      string service_port = 2 [json_name = "service_port"];
    }

    message Rule {
      // Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
      //   the IP in the Spec of the parent Ingress.
      // 2. The `:` delimiter is not respected because ports are not allowed.
      // 	  Currently the port of an Ingress is implicitly :80 for http and
      // 	  :443 for https.
      // Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
      //
      // Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
      string host = 1;

      Http http = 2;

      message Http {
        repeated Path path = 1;

        message Path {
          // Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
          string path = 1;

          Backend backend = 2;

          message Backend {
            // Specifies the name of the referenced service.
            string service_name = 1 [json_name = "service_name"];

            // Specifies the port of the referenced service.
            string service_port = 2 [json_name = "service_port"];
          }
        }
      }
    }

    message Tls {
      // Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
      repeated string hosts = 1;

      // SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
      string secret_name = 2 [json_name = "secret_name"];
    }
  }
}

// KubernetesIngressClass version is 0
message KubernetesIngressClass {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the ingress_class that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the ingress_class. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the ingress_class, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // An opaque value that represents the internal version of this ingress_class that can be used by clients to determine when ingress_class has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 6 [json_name = "resource_version"];

    // The unique in time and space value for this ingress_class. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 7;
  }

  message Spec {
    // Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
    string controller = 1;

    repeated Parameters parameters = 2;

    message Parameters {
      // APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
      string api_group = 1 [json_name = "api_group"];

      // Kind is the type of resource being referenced
      string kind = 2;

      // Name is the name of resource being referenced
      string name = 3;

      string namespace = 4;

      string scope = 5;
    }
  }
}

// KubernetesIngressClassV1 version is 0
message KubernetesIngressClassV1 {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the ingress_class that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the ingress_class. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the ingress_class, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // An opaque value that represents the internal version of this ingress_class that can be used by clients to determine when ingress_class has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 6 [json_name = "resource_version"];

    // The unique in time and space value for this ingress_class. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 7;
  }

  message Spec {
    // Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
    string controller = 1;

    repeated Parameters parameters = 2;

    message Parameters {
      // APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
      string api_group = 1 [json_name = "api_group"];

      // Kind is the type of resource being referenced
      string kind = 2;

      // Name is the name of resource being referenced
      string name = 3;

      string namespace = 4;

      string scope = 5;
    }
  }
}

// KubernetesIngressV1 version is 0
message KubernetesIngressV1 {
  string id = 1;

  repeated Status status = 2;

  // Terraform will wait for the load balancer to have at least 1 endpoint before considering the resource created.
  bool wait_for_load_balancer = 3 [json_name = "wait_for_load_balancer"];

  Metadata metadata = 4;

  Spec spec = 5;

  repeated Timeouts timeouts = 6;

  map<string, string> for_each = 7 [json_name = "for_each"];

  repeated string depends_on = 8 [json_name = "depends_on"];

  int32 count = 9;

  string provider = 10;

  terraform.v1.Lifecycle lifecycle = 11;

  message Status {
    // load_balancer: list of object
    repeated LoadBalancer load_balancer = 1 [json_name = "load_balancer"];

    message LoadBalancer {
      // ingress: list of object
      repeated Ingress ingress = 1;

      message Ingress {
        // hostname: string
        string hostname = 1;

        // ip: string
        string ip = 2;
      }
    }
  }

  message Metadata {
    // An unstructured key value map stored with the ingress that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the ingress. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the ingress, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the ingress must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this ingress that can be used by clients to determine when ingress has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this ingress. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    // IngressClassName is the name of an IngressClass cluster resource. Ingress controller implementations use this field to know whether they should be serving this Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource). Although the `kubernetes.io/ingress.class` annotation (simple constant name) was never formally defined, it was widely supported by Ingress controllers to create a direct binding between Ingress controller and Ingress resources. Newly created Ingress resources should prefer using the field. However, even though the annotation is officially deprecated, for backwards compatibility reasons, ingress controllers should still honor that annotation if present.
    string ingress_class_name = 1 [json_name = "ingress_class_name"];

    DefaultBackend default_backend = 2 [json_name = "default_backend"];

    repeated Rule rule = 3;

    repeated Tls tls = 4;

    message DefaultBackend {
      Resource resource = 1;

      Service service = 2;

      message Resource {
        // APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
        string api_group = 1 [json_name = "api_group"];

        // The kind of resource.
        string kind = 2;

        // The name of the User to bind to.
        string name = 3;
      }

      message Service {
        // Specifies the name of the referenced service.
        string name = 1;

        Port port = 2;

        message Port {
          // Specifies the name of the port of the referenced service.
          string name = 1;

          // Specifies the numerical port of the referenced service.
          int64 number = 2;
        }
      }
    }

    message Rule {
      // Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the "host" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to
      //   the IP in the Spec of the parent Ingress.
      // 2. The `:` delimiter is not respected because ports are not allowed.
      // 	  Currently the port of an Ingress is implicitly :80 for http and
      // 	  :443 for https.
      // Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue.
      //
      // Host can be "precise" which is a domain name without the terminating dot of a network host (e.g. "foo.bar.com") or "wildcard", which is a domain name prefixed with a single wildcard label (e.g. "*.foo.com"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == "*"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.
      string host = 1;

      Http http = 2;

      message Http {
        repeated Path path = 1;

        message Path {
          // Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".
          string path = 1;

          // PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is
          //  done on a path element by element basis. A path element refers is the
          //  list of labels in the path split by the '/' separator. A request is a
          //  match for path p if every p is an element-wise prefix of p of the
          //  request path. Note that if the last element of the path is a substring
          //  of the last element in request path, it is not a match (e.g. /foo/bar
          //  matches /foo/bar/baz, but does not match /foo/barbaz).
          // * ImplementationSpecific: Interpretation of the Path matching is up to
          //  the IngressClass. Implementations can treat this as a separate PathType
          //  or treat it identically to Prefix or Exact path types.
          // Implementations are required to support all path types.
          string path_type = 2 [json_name = "path_type"];

          Backend backend = 3;

          message Backend {
            Resource resource = 1;

            Service service = 2;

            message Resource {
              // APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
              string api_group = 1 [json_name = "api_group"];

              // The kind of resource.
              string kind = 2;

              // The name of the User to bind to.
              string name = 3;
            }

            message Service {
              // Specifies the name of the referenced service.
              string name = 1;

              Port port = 2;

              message Port {
                // Specifies the name of the port of the referenced service.
                string name = 1;

                // Specifies the numerical port of the referenced service.
                int64 number = 2;
              }
            }
          }
        }
      }
    }

    message Tls {
      // Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.
      repeated string hosts = 1;

      // SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.
      string secret_name = 2 [json_name = "secret_name"];
    }
  }

  message Timeouts {
    string create = 1;

    string delete = 2;
  }
}
