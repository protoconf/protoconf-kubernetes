syntax = "proto3";

// Provider: kubernetes 2.20.0
package terraform.kubernetes.resources.v2;

import "terraform/v1/meta.proto";

// KubernetesPod version is 1
message KubernetesPod {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  repeated Timeouts timeouts = 4;

  map<string, string> for_each = 5 [json_name = "for_each"];

  repeated string depends_on = 6 [json_name = "depends_on"];

  int32 count = 7;

  string provider = 8;

  terraform.v1.Lifecycle lifecycle = 9;

  message Metadata {
    // An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the pod, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the pod must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this pod. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    int64 active_deadline_seconds = 1 [json_name = "active_deadline_seconds"];

    // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    bool automount_service_account_token = 2 [json_name = "automount_service_account_token"];

    // Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Optional: Defaults to 'ClusterFirst', see [Kubernetes reference](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy).
    string dns_policy = 3 [json_name = "dns_policy"];

    // Enables generating environment variables for service discovery. Defaults to true.
    bool enable_service_links = 4 [json_name = "enable_service_links"];

    // Use the host's ipc namespace. Optional: Defaults to false.
    bool host_ipc = 5 [json_name = "host_ipc"];

    // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
    bool host_network = 6 [json_name = "host_network"];

    // Use the host's pid namespace.
    bool host_pid = 7 [json_name = "host_pid"];

    // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    string hostname = 8;

    // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    string node_name = 9 [json_name = "node_name"];

    // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://kubernetes.io/docs/user-guide/node-selection.
    map<string, string> node_selector = 10 [json_name = "node_selector"];

    // If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
    string priority_class_name = 11 [json_name = "priority_class_name"];

    // Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: http://kubernetes.io/docs/user-guide/pod-states#restartpolicy.
    string restart_policy = 12 [json_name = "restart_policy"];

    // RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
    string runtime_class_name = 13 [json_name = "runtime_class_name"];

    // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    string scheduler_name = 14 [json_name = "scheduler_name"];

    // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
    string service_account_name = 15 [json_name = "service_account_name"];

    // Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
    bool share_process_namespace = 16 [json_name = "share_process_namespace"];

    // If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
    string subdomain = 17;

    // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
    int64 termination_grace_period_seconds = 18 [json_name = "termination_grace_period_seconds"];

    Affinity affinity = 19;

    repeated Container container = 20;

    DnsConfig dns_config = 21 [json_name = "dns_config"];

    repeated HostAliases host_aliases = 22 [json_name = "host_aliases"];

    repeated ImagePullSecrets image_pull_secrets = 23 [json_name = "image_pull_secrets"];

    repeated InitContainer init_container = 24 [json_name = "init_container"];

    repeated ReadinessGate readiness_gate = 25 [json_name = "readiness_gate"];

    SecurityContext security_context = 26 [json_name = "security_context"];

    repeated Toleration toleration = 27;

    repeated TopologySpreadConstraint topology_spread_constraint = 28 [json_name = "topology_spread_constraint"];

    repeated Volume volume = 29;

    message Affinity {
      NodeAffinity node_affinity = 1 [json_name = "node_affinity"];

      PodAffinity pod_affinity = 2 [json_name = "pod_affinity"];

      PodAntiAffinity pod_anti_affinity = 3 [json_name = "pod_anti_affinity"];

      message NodeAffinity {
        repeated PreferredDuringSchedulingIgnoredDuringExecution preferred_during_scheduling_ignored_during_execution = 1 [
          json_name = "preferred_during_scheduling_ignored_during_execution"
        ];

        RequiredDuringSchedulingIgnoredDuringExecution required_during_scheduling_ignored_during_execution = 2 [
          json_name = "required_during_scheduling_ignored_during_execution"
        ];

        message PreferredDuringSchedulingIgnoredDuringExecution {
          // weight is in the range 1-100
          int64 weight = 1;

          Preference preference = 2;

          message Preference {
            repeated MatchExpressions match_expressions = 1 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
              string operator = 2;

              // Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message RequiredDuringSchedulingIgnoredDuringExecution {
          repeated NodeSelectorTerm node_selector_term = 1 [json_name = "node_selector_term"];

          message NodeSelectorTerm {
            repeated MatchExpressions match_expressions = 1 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
              string operator = 2;

              // Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }
      }

      message PodAffinity {
        repeated PreferredDuringSchedulingIgnoredDuringExecution preferred_during_scheduling_ignored_during_execution = 1 [
          json_name = "preferred_during_scheduling_ignored_during_execution"
        ];

        repeated RequiredDuringSchedulingIgnoredDuringExecution required_during_scheduling_ignored_during_execution = 2 [
          json_name = "required_during_scheduling_ignored_during_execution"
        ];

        message PreferredDuringSchedulingIgnoredDuringExecution {
          // weight associated with matching the corresponding podAffinityTerm, in the range 1-100
          int64 weight = 1;

          PodAffinityTerm pod_affinity_term = 2 [json_name = "pod_affinity_term"];

          message PodAffinityTerm {
            // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
            repeated string namespaces = 1;

            // empty topology key is interpreted by the scheduler as 'all topologies'
            string topology_key = 2 [json_name = "topology_key"];

            repeated LabelSelector label_selector = 3 [json_name = "label_selector"];

            message LabelSelector {
              // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
              map<string, string> match_labels = 1 [json_name = "match_labels"];

              repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

              message MatchExpressions {
                // The label key that the selector applies to.
                string key = 1;

                // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
                string operator = 2;

                // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
                repeated string values = 3;
              }
            }
          }
        }

        message RequiredDuringSchedulingIgnoredDuringExecution {
          // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
          repeated string namespaces = 1;

          // empty topology key is interpreted by the scheduler as 'all topologies'
          string topology_key = 2 [json_name = "topology_key"];

          repeated LabelSelector label_selector = 3 [json_name = "label_selector"];

          message LabelSelector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }
      }

      message PodAntiAffinity {
        repeated PreferredDuringSchedulingIgnoredDuringExecution preferred_during_scheduling_ignored_during_execution = 1 [
          json_name = "preferred_during_scheduling_ignored_during_execution"
        ];

        repeated RequiredDuringSchedulingIgnoredDuringExecution required_during_scheduling_ignored_during_execution = 2 [
          json_name = "required_during_scheduling_ignored_during_execution"
        ];

        message PreferredDuringSchedulingIgnoredDuringExecution {
          // weight associated with matching the corresponding podAffinityTerm, in the range 1-100
          int64 weight = 1;

          PodAffinityTerm pod_affinity_term = 2 [json_name = "pod_affinity_term"];

          message PodAffinityTerm {
            // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
            repeated string namespaces = 1;

            // empty topology key is interpreted by the scheduler as 'all topologies'
            string topology_key = 2 [json_name = "topology_key"];

            repeated LabelSelector label_selector = 3 [json_name = "label_selector"];

            message LabelSelector {
              // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
              map<string, string> match_labels = 1 [json_name = "match_labels"];

              repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

              message MatchExpressions {
                // The label key that the selector applies to.
                string key = 1;

                // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
                string operator = 2;

                // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
                repeated string values = 3;
              }
            }
          }
        }

        message RequiredDuringSchedulingIgnoredDuringExecution {
          // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
          repeated string namespaces = 1;

          // empty topology key is interpreted by the scheduler as 'all topologies'
          string topology_key = 2 [json_name = "topology_key"];

          repeated LabelSelector label_selector = 3 [json_name = "label_selector"];

          message LabelSelector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }
      }
    }

    message Container {
      // Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
      repeated string args = 1;

      // Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
      repeated string command = 2;

      // Docker image name. More info: http://kubernetes.io/docs/user-guide/images
      string image = 3;

      // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images
      string image_pull_policy = 4 [json_name = "image_pull_policy"];

      // Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
      string name = 5;

      // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
      bool stdin = 6;

      // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
      bool stdin_once = 7 [json_name = "stdin_once"];

      // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
      string termination_message_path = 8 [json_name = "termination_message_path"];

      // Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
      string termination_message_policy = 9 [json_name = "termination_message_policy"];

      // Whether this container should allocate a TTY for itself
      bool tty = 10;

      // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
      string working_dir = 11 [json_name = "working_dir"];

      repeated Env env = 12;

      repeated EnvFrom env_from = 13 [json_name = "env_from"];

      Lifecycle lifecycle = 14;

      LivenessProbe liveness_probe = 15 [json_name = "liveness_probe"];

      repeated Port port = 16;

      ReadinessProbe readiness_probe = 17 [json_name = "readiness_probe"];

      Resources resources = 18;

      SecurityContext security_context = 19 [json_name = "security_context"];

      StartupProbe startup_probe = 20 [json_name = "startup_probe"];

      repeated VolumeMount volume_mount = 21 [json_name = "volume_mount"];

      message Env {
        // Name of the environment variable. Must be a C_IDENTIFIER
        string name = 1;

        // Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        string value = 2;

        ValueFrom value_from = 3 [json_name = "value_from"];

        message ValueFrom {
          ConfigMapKeyRef config_map_key_ref = 1 [json_name = "config_map_key_ref"];

          FieldRef field_ref = 2 [json_name = "field_ref"];

          ResourceFieldRef resource_field_ref = 3 [json_name = "resource_field_ref"];

          SecretKeyRef secret_key_ref = 4 [json_name = "secret_key_ref"];

          message ConfigMapKeyRef {
            // The key to select.
            string key = 1;

            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 2;

            // Specify whether the ConfigMap or its key must be defined.
            bool optional = 3;
          }

          message FieldRef {
            // Version of the schema the FieldPath is written in terms of, defaults to "v1".
            string api_version = 1 [json_name = "api_version"];

            // Path of the field to select in the specified API version
            string field_path = 2 [json_name = "field_path"];
          }

          message ResourceFieldRef {
            string container_name = 1 [json_name = "container_name"];

            string divisor = 2;

            // Resource to select
            string resource = 3;
          }

          message SecretKeyRef {
            // The key of the secret to select from. Must be a valid secret key.
            string key = 1;

            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 2;

            // Specify whether the Secret or its key must be defined.
            bool optional = 3;
          }
        }
      }

      message EnvFrom {
        // An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        string prefix = 1;

        ConfigMapRef config_map_ref = 2 [json_name = "config_map_ref"];

        SecretRef secret_ref = 3 [json_name = "secret_ref"];

        message ConfigMapRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Specify whether the ConfigMap must be defined
          bool optional = 2;
        }

        message SecretRef {
          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          string name = 1;

          // Specify whether the Secret must be defined
          bool optional = 2;
        }
      }

      message Lifecycle {
        repeated PostStart post_start = 1 [json_name = "post_start"];

        repeated PreStop pre_stop = 2 [json_name = "pre_stop"];

        message PostStart {
          Exec exec = 1;

          HttpGet http_get = 2 [json_name = "http_get"];

          repeated TcpSocket tcp_socket = 3 [json_name = "tcp_socket"];

          message Exec {
            // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            repeated string command = 1;
          }

          message HttpGet {
            // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            string host = 1;

            // Path to access on the HTTP server.
            string path = 2;

            // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 3;

            // Scheme to use for connecting to the host.
            string scheme = 4;

            repeated HttpHeader http_header = 5 [json_name = "http_header"];

            message HttpHeader {
              // The header field name
              string name = 1;

              // The header field value
              string value = 2;
            }
          }

          message TcpSocket {
            // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 1;
          }
        }

        message PreStop {
          Exec exec = 1;

          HttpGet http_get = 2 [json_name = "http_get"];

          repeated TcpSocket tcp_socket = 3 [json_name = "tcp_socket"];

          message Exec {
            // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            repeated string command = 1;
          }

          message HttpGet {
            // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            string host = 1;

            // Path to access on the HTTP server.
            string path = 2;

            // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 3;

            // Scheme to use for connecting to the host.
            string scheme = 4;

            repeated HttpHeader http_header = 5 [json_name = "http_header"];

            message HttpHeader {
              // The header field name
              string name = 1;

              // The header field value
              string value = 2;
            }
          }

          message TcpSocket {
            // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 1;
          }
        }
      }

      message LivenessProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message Port {
        // Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        int64 container_port = 1 [json_name = "container_port"];

        // What host IP to bind the external port to.
        string host_ip = 2 [json_name = "host_ip"];

        // Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        int64 host_port = 3 [json_name = "host_port"];

        // If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        string name = 4;

        // Protocol for port. Must be UDP or TCP. Defaults to "TCP".
        string protocol = 5;
      }

      message ReadinessProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message Resources {
        // Describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        map<string, string> limits = 1;

        // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        map<string, string> requests = 2;
      }

      message SecurityContext {
        // AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        bool allow_privilege_escalation = 1 [json_name = "allow_privilege_escalation"];

        // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        bool privileged = 2;

        // Whether this container has a read-only root filesystem. Default is false.
        bool read_only_root_filesystem = 3 [json_name = "read_only_root_filesystem"];

        // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        string run_as_group = 4 [json_name = "run_as_group"];

        // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        bool run_as_non_root = 5 [json_name = "run_as_non_root"];

        // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        string run_as_user = 6 [json_name = "run_as_user"];

        Capabilities capabilities = 7;

        SeLinuxOptions se_linux_options = 8 [json_name = "se_linux_options"];

        SeccompProfile seccomp_profile = 9 [json_name = "seccomp_profile"];

        message Capabilities {
          // Added capabilities
          repeated string add = 1;

          // Removed capabilities
          repeated string drop = 2;
        }

        message SeLinuxOptions {
          // Level is SELinux level label that applies to the container.
          string level = 1;

          // Role is a SELinux role label that applies to the container.
          string role = 2;

          // Type is a SELinux type label that applies to the container.
          string type = 3;

          // User is a SELinux user label that applies to the container.
          string user = 4;
        }

        message SeccompProfile {
          // Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
          string localhost_profile = 1 [json_name = "localhost_profile"];

          // Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
          string type = 2;
        }
      }

      message StartupProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message VolumeMount {
        // Path within the container at which the volume should be mounted. Must not contain ':'.
        string mount_path = 1 [json_name = "mount_path"];

        // Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
        string mount_propagation = 2 [json_name = "mount_propagation"];

        // This must match the Name of a Volume.
        string name = 3;

        // Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        bool read_only = 4 [json_name = "read_only"];

        // Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        string sub_path = 5 [json_name = "sub_path"];
      }
    }

    message DnsConfig {
      // A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
      repeated string nameservers = 1;

      // A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
      repeated string searches = 2;

      repeated Option option = 3;

      message Option {
        // Name of the option.
        string name = 1;

        // Value of the option. Optional: Defaults to empty.
        string value = 2;
      }
    }

    message HostAliases {
      // Hostnames for the IP address.
      repeated string hostnames = 1;

      // IP address of the host file entry.
      string ip = 2;
    }

    message ImagePullSecrets {
      // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      string name = 1;
    }

    message InitContainer {
      // Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
      repeated string args = 1;

      // Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
      repeated string command = 2;

      // Docker image name. More info: http://kubernetes.io/docs/user-guide/images
      string image = 3;

      // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images
      string image_pull_policy = 4 [json_name = "image_pull_policy"];

      // Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
      string name = 5;

      // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
      bool stdin = 6;

      // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
      bool stdin_once = 7 [json_name = "stdin_once"];

      // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
      string termination_message_path = 8 [json_name = "termination_message_path"];

      // Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
      string termination_message_policy = 9 [json_name = "termination_message_policy"];

      // Whether this container should allocate a TTY for itself
      bool tty = 10;

      // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
      string working_dir = 11 [json_name = "working_dir"];

      repeated Env env = 12;

      repeated EnvFrom env_from = 13 [json_name = "env_from"];

      Lifecycle lifecycle = 14;

      LivenessProbe liveness_probe = 15 [json_name = "liveness_probe"];

      repeated Port port = 16;

      ReadinessProbe readiness_probe = 17 [json_name = "readiness_probe"];

      Resources resources = 18;

      SecurityContext security_context = 19 [json_name = "security_context"];

      StartupProbe startup_probe = 20 [json_name = "startup_probe"];

      repeated VolumeMount volume_mount = 21 [json_name = "volume_mount"];

      message Env {
        // Name of the environment variable. Must be a C_IDENTIFIER
        string name = 1;

        // Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        string value = 2;

        ValueFrom value_from = 3 [json_name = "value_from"];

        message ValueFrom {
          ConfigMapKeyRef config_map_key_ref = 1 [json_name = "config_map_key_ref"];

          FieldRef field_ref = 2 [json_name = "field_ref"];

          ResourceFieldRef resource_field_ref = 3 [json_name = "resource_field_ref"];

          SecretKeyRef secret_key_ref = 4 [json_name = "secret_key_ref"];

          message ConfigMapKeyRef {
            // The key to select.
            string key = 1;

            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 2;

            // Specify whether the ConfigMap or its key must be defined.
            bool optional = 3;
          }

          message FieldRef {
            // Version of the schema the FieldPath is written in terms of, defaults to "v1".
            string api_version = 1 [json_name = "api_version"];

            // Path of the field to select in the specified API version
            string field_path = 2 [json_name = "field_path"];
          }

          message ResourceFieldRef {
            string container_name = 1 [json_name = "container_name"];

            string divisor = 2;

            // Resource to select
            string resource = 3;
          }

          message SecretKeyRef {
            // The key of the secret to select from. Must be a valid secret key.
            string key = 1;

            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 2;

            // Specify whether the Secret or its key must be defined.
            bool optional = 3;
          }
        }
      }

      message EnvFrom {
        // An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        string prefix = 1;

        ConfigMapRef config_map_ref = 2 [json_name = "config_map_ref"];

        SecretRef secret_ref = 3 [json_name = "secret_ref"];

        message ConfigMapRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Specify whether the ConfigMap must be defined
          bool optional = 2;
        }

        message SecretRef {
          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          string name = 1;

          // Specify whether the Secret must be defined
          bool optional = 2;
        }
      }

      message Lifecycle {
        repeated PostStart post_start = 1 [json_name = "post_start"];

        repeated PreStop pre_stop = 2 [json_name = "pre_stop"];

        message PostStart {
          Exec exec = 1;

          HttpGet http_get = 2 [json_name = "http_get"];

          repeated TcpSocket tcp_socket = 3 [json_name = "tcp_socket"];

          message Exec {
            // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            repeated string command = 1;
          }

          message HttpGet {
            // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            string host = 1;

            // Path to access on the HTTP server.
            string path = 2;

            // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 3;

            // Scheme to use for connecting to the host.
            string scheme = 4;

            repeated HttpHeader http_header = 5 [json_name = "http_header"];

            message HttpHeader {
              // The header field name
              string name = 1;

              // The header field value
              string value = 2;
            }
          }

          message TcpSocket {
            // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 1;
          }
        }

        message PreStop {
          Exec exec = 1;

          HttpGet http_get = 2 [json_name = "http_get"];

          repeated TcpSocket tcp_socket = 3 [json_name = "tcp_socket"];

          message Exec {
            // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            repeated string command = 1;
          }

          message HttpGet {
            // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            string host = 1;

            // Path to access on the HTTP server.
            string path = 2;

            // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 3;

            // Scheme to use for connecting to the host.
            string scheme = 4;

            repeated HttpHeader http_header = 5 [json_name = "http_header"];

            message HttpHeader {
              // The header field name
              string name = 1;

              // The header field value
              string value = 2;
            }
          }

          message TcpSocket {
            // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 1;
          }
        }
      }

      message LivenessProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message Port {
        // Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        int64 container_port = 1 [json_name = "container_port"];

        // What host IP to bind the external port to.
        string host_ip = 2 [json_name = "host_ip"];

        // Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        int64 host_port = 3 [json_name = "host_port"];

        // If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        string name = 4;

        // Protocol for port. Must be UDP or TCP. Defaults to "TCP".
        string protocol = 5;
      }

      message ReadinessProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message Resources {
        // Describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        map<string, string> limits = 1;

        // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        map<string, string> requests = 2;
      }

      message SecurityContext {
        // AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        bool allow_privilege_escalation = 1 [json_name = "allow_privilege_escalation"];

        // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        bool privileged = 2;

        // Whether this container has a read-only root filesystem. Default is false.
        bool read_only_root_filesystem = 3 [json_name = "read_only_root_filesystem"];

        // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        string run_as_group = 4 [json_name = "run_as_group"];

        // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        bool run_as_non_root = 5 [json_name = "run_as_non_root"];

        // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        string run_as_user = 6 [json_name = "run_as_user"];

        Capabilities capabilities = 7;

        SeLinuxOptions se_linux_options = 8 [json_name = "se_linux_options"];

        SeccompProfile seccomp_profile = 9 [json_name = "seccomp_profile"];

        message Capabilities {
          // Added capabilities
          repeated string add = 1;

          // Removed capabilities
          repeated string drop = 2;
        }

        message SeLinuxOptions {
          // Level is SELinux level label that applies to the container.
          string level = 1;

          // Role is a SELinux role label that applies to the container.
          string role = 2;

          // Type is a SELinux type label that applies to the container.
          string type = 3;

          // User is a SELinux user label that applies to the container.
          string user = 4;
        }

        message SeccompProfile {
          // Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
          string localhost_profile = 1 [json_name = "localhost_profile"];

          // Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
          string type = 2;
        }
      }

      message StartupProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message VolumeMount {
        // Path within the container at which the volume should be mounted. Must not contain ':'.
        string mount_path = 1 [json_name = "mount_path"];

        // Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
        string mount_propagation = 2 [json_name = "mount_propagation"];

        // This must match the Name of a Volume.
        string name = 3;

        // Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        bool read_only = 4 [json_name = "read_only"];

        // Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        string sub_path = 5 [json_name = "sub_path"];
      }
    }

    message ReadinessGate {
      // refers to a condition in the pod's condition list with matching type.
      string condition_type = 1 [json_name = "condition_type"];
    }

    message SecurityContext {
      // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
      string fs_group = 1 [json_name = "fs_group"];

      // fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
      string fs_group_change_policy = 2 [json_name = "fs_group_change_policy"];

      // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
      string run_as_group = 3 [json_name = "run_as_group"];

      // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
      bool run_as_non_root = 4 [json_name = "run_as_non_root"];

      // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
      string run_as_user = 5 [json_name = "run_as_user"];

      // A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
      repeated int64 supplemental_groups = 6 [json_name = "supplemental_groups"];

      SeLinuxOptions se_linux_options = 7 [json_name = "se_linux_options"];

      SeccompProfile seccomp_profile = 8 [json_name = "seccomp_profile"];

      repeated Sysctl sysctl = 9;

      message SeLinuxOptions {
        // Level is SELinux level label that applies to the container.
        string level = 1;

        // Role is a SELinux role label that applies to the container.
        string role = 2;

        // Type is a SELinux type label that applies to the container.
        string type = 3;

        // User is a SELinux user label that applies to the container.
        string user = 4;
      }

      message SeccompProfile {
        // Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
        string localhost_profile = 1 [json_name = "localhost_profile"];

        // Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
        string type = 2;
      }

      message Sysctl {
        // Name of a property to set.
        string name = 1;

        // Value of a property to set.
        string value = 2;
      }
    }

    message Toleration {
      // Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
      string effect = 1;

      // Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
      string key = 2;

      // Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
      string operator = 3;

      // TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
      string toleration_seconds = 4 [json_name = "toleration_seconds"];

      // Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
      string value = 5;
    }

    message TopologySpreadConstraint {
      // describes the degree to which pods may be unevenly distributed.
      int64 max_skew = 1 [json_name = "max_skew"];

      // the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
      string topology_key = 2 [json_name = "topology_key"];

      // indicates how to deal with a pod if it doesn't satisfy the spread constraint.
      string when_unsatisfiable = 3 [json_name = "when_unsatisfiable"];

      repeated LabelSelector label_selector = 4 [json_name = "label_selector"];

      message LabelSelector {
        // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        map<string, string> match_labels = 1 [json_name = "match_labels"];

        repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

        message MatchExpressions {
          // The label key that the selector applies to.
          string key = 1;

          // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
          string operator = 2;

          // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
          repeated string values = 3;
        }
      }
    }

    message Volume {
      // Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      string name = 1;

      AwsElasticBlockStore aws_elastic_block_store = 2 [json_name = "aws_elastic_block_store"];

      AzureDisk azure_disk = 3 [json_name = "azure_disk"];

      AzureFile azure_file = 4 [json_name = "azure_file"];

      CephFs ceph_fs = 5 [json_name = "ceph_fs"];

      Cinder cinder = 6;

      ConfigMap config_map = 7 [json_name = "config_map"];

      Csi csi = 8;

      DownwardApi downward_api = 9 [json_name = "downward_api"];

      EmptyDir empty_dir = 10 [json_name = "empty_dir"];

      Fc fc = 11;

      FlexVolume flex_volume = 12 [json_name = "flex_volume"];

      Flocker flocker = 13;

      GcePersistentDisk gce_persistent_disk = 14 [json_name = "gce_persistent_disk"];

      GitRepo git_repo = 15 [json_name = "git_repo"];

      Glusterfs glusterfs = 16;

      HostPath host_path = 17 [json_name = "host_path"];

      Iscsi iscsi = 18;

      Local local = 19;

      Nfs nfs = 20;

      PersistentVolumeClaim persistent_volume_claim = 21 [json_name = "persistent_volume_claim"];

      PhotonPersistentDisk photon_persistent_disk = 22 [json_name = "photon_persistent_disk"];

      repeated Projected projected = 23;

      Quobyte quobyte = 24;

      Rbd rbd = 25;

      Secret secret = 26;

      VsphereVolume vsphere_volume = 27 [json_name = "vsphere_volume"];

      message AwsElasticBlockStore {
        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
        string fs_type = 1 [json_name = "fs_type"];

        // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        int64 partition = 2;

        // Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
        bool read_only = 3 [json_name = "read_only"];

        // Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
        string volume_id = 4 [json_name = "volume_id"];
      }

      message AzureDisk {
        // Host Caching mode: None, Read Only, Read Write.
        string caching_mode = 1 [json_name = "caching_mode"];

        // The URI the data disk in the blob storage
        string data_disk_uri = 2 [json_name = "data_disk_uri"];

        // The Name of the data disk in the blob storage
        string disk_name = 3 [json_name = "disk_name"];

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 4 [json_name = "fs_type"];

        // The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
        string kind = 5;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        bool read_only = 6 [json_name = "read_only"];
      }

      message AzureFile {
        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        bool read_only = 1 [json_name = "read_only"];

        // The name of secret that contains Azure Storage Account Name and Key
        string secret_name = 2 [json_name = "secret_name"];

        // The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
        string secret_namespace = 3 [json_name = "secret_namespace"];

        // Share Name
        string share_name = 4 [json_name = "share_name"];
      }

      message CephFs {
        // Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        repeated string monitors = 1;

        // Used as the mounted root, rather than the full Ceph tree, default is /
        string path = 2;

        // Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        bool read_only = 3 [json_name = "read_only"];

        // The path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        string secret_file = 4 [json_name = "secret_file"];

        // User is the rados user name, default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        string user = 5;

        SecretRef secret_ref = 6 [json_name = "secret_ref"];

        message SecretRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string namespace = 2;
        }
      }

      message Cinder {
        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        string fs_type = 1 [json_name = "fs_type"];

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        bool read_only = 2 [json_name = "read_only"];

        // Volume ID used to identify the volume in Cinder. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        string volume_id = 3 [json_name = "volume_id"];
      }

      message ConfigMap {
        // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        string default_mode = 1 [json_name = "default_mode"];

        // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        string name = 2;

        // Optional: Specify whether the ConfigMap or its keys must be defined.
        bool optional = 3;

        repeated Items items = 4;

        message Items {
          // The key to project.
          string key = 1;

          // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
          string mode = 2;

          // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
          string path = 3;
        }
      }

      message Csi {
        // the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
        string driver = 1;

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 2 [json_name = "fs_type"];

        // Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: http://kubernetes.io/docs/user-guide/volumes#csi
        bool read_only = 3 [json_name = "read_only"];

        // Attributes of the volume to publish.
        map<string, string> volume_attributes = 4 [json_name = "volume_attributes"];

        NodePublishSecretRef node_publish_secret_ref = 5 [json_name = "node_publish_secret_ref"];

        message NodePublishSecretRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;
        }
      }

      message DownwardApi {
        // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        string default_mode = 1 [json_name = "default_mode"];

        repeated Items items = 2;

        message Items {
          // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
          string mode = 1;

          // Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
          string path = 2;

          FieldRef field_ref = 3 [json_name = "field_ref"];

          ResourceFieldRef resource_field_ref = 4 [json_name = "resource_field_ref"];

          message FieldRef {
            // Version of the schema the FieldPath is written in terms of, defaults to "v1".
            string api_version = 1 [json_name = "api_version"];

            // Path of the field to select in the specified API version
            string field_path = 2 [json_name = "field_path"];
          }

          message ResourceFieldRef {
            string container_name = 1 [json_name = "container_name"];

            string divisor = 2;

            // Resource to select
            string resource = 3;
          }
        }
      }

      message EmptyDir {
        // What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        string medium = 1;

        // Total amount of local storage required for this EmptyDir volume.
        string size_limit = 2 [json_name = "size_limit"];
      }

      message Fc {
        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 1 [json_name = "fs_type"];

        // FC target lun number
        int64 lun = 2;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        bool read_only = 3 [json_name = "read_only"];

        // FC target worldwide names (WWNs)
        repeated string target_ww_ns = 4 [json_name = "target_ww_ns"];
      }

      message FlexVolume {
        // Driver is the name of the driver to use for this volume.
        string driver = 1;

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        string fs_type = 2 [json_name = "fs_type"];

        // Extra command options if any.
        map<string, string> options = 3;

        // Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
        bool read_only = 4 [json_name = "read_only"];

        SecretRef secret_ref = 5 [json_name = "secret_ref"];

        message SecretRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string namespace = 2;
        }
      }

      message Flocker {
        // Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        string dataset_name = 1 [json_name = "dataset_name"];

        // UUID of the dataset. This is unique identifier of a Flocker dataset
        string dataset_uuid = 2 [json_name = "dataset_uuid"];
      }

      message GcePersistentDisk {
        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        string fs_type = 1 [json_name = "fs_type"];

        // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        int64 partition = 2;

        // Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        string pd_name = 3 [json_name = "pd_name"];

        // Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        bool read_only = 4 [json_name = "read_only"];
      }

      message GitRepo {
        // Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        string directory = 1;

        // Repository URL
        string repository = 2;

        // Commit hash for the specified revision.
        string revision = 3;
      }

      message Glusterfs {
        // The endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        string endpoints_name = 1 [json_name = "endpoints_name"];

        // The Glusterfs volume path. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        string path = 2;

        // Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        bool read_only = 3 [json_name = "read_only"];
      }

      message HostPath {
        // Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath
        string path = 1;

        // Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
        string type = 2;
      }

      message Iscsi {
        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#iscsi
        string fs_type = 1 [json_name = "fs_type"];

        // Target iSCSI Qualified Name.
        string iqn = 2;

        // iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
        string iscsi_interface = 3 [json_name = "iscsi_interface"];

        // iSCSI target lun number.
        int64 lun = 4;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false.
        bool read_only = 5 [json_name = "read_only"];

        // iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        string target_portal = 6 [json_name = "target_portal"];
      }

      message Local {
        // Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#local
        string path = 1;
      }

      message Nfs {
        // Path that is exported by the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
        string path = 1;

        // Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
        bool read_only = 2 [json_name = "read_only"];

        // Server is the hostname or IP address of the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
        string server = 3;
      }

      message PersistentVolumeClaim {
        // ClaimName is the name of a PersistentVolumeClaim in the same
        string claim_name = 1 [json_name = "claim_name"];

        // Will force the ReadOnly setting in VolumeMounts.
        bool read_only = 2 [json_name = "read_only"];
      }

      message PhotonPersistentDisk {
        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 1 [json_name = "fs_type"];

        // ID that identifies Photon Controller persistent disk
        string pd_id = 2 [json_name = "pd_id"];
      }

      message Projected {
        // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        string default_mode = 1 [json_name = "default_mode"];

        repeated Sources sources = 2;

        message Sources {
          repeated ConfigMap config_map = 1 [json_name = "config_map"];

          DownwardApi downward_api = 2 [json_name = "downward_api"];

          repeated Secret secret = 3;

          ServiceAccountToken service_account_token = 4 [json_name = "service_account_token"];

          message ConfigMap {
            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 1;

            // Optional: Specify whether the ConfigMap or it's keys must be defined.
            bool optional = 2;

            repeated Items items = 3;

            message Items {
              // The key to project.
              string key = 1;

              // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
              string mode = 2;

              // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
              string path = 3;
            }
          }

          message DownwardApi {
            repeated Items items = 1;

            message Items {
              // Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
              string mode = 1;

              // Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
              string path = 2;

              FieldRef field_ref = 3 [json_name = "field_ref"];

              ResourceFieldRef resource_field_ref = 4 [json_name = "resource_field_ref"];

              message FieldRef {
                // Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
                string api_version = 1 [json_name = "api_version"];

                // Path of the field to select in the specified API version
                string field_path = 2 [json_name = "field_path"];
              }

              message ResourceFieldRef {
                string container_name = 1 [json_name = "container_name"];

                string divisor = 2;

                // Resource to select
                string resource = 3;
              }
            }
          }

          message Secret {
            // Name of the secret in the pod's namespace to use. More info: http://kubernetes.io/docs/user-guide/volumes#secrets
            string name = 1;

            // Optional: Specify whether the Secret or it's keys must be defined.
            bool optional = 2;

            repeated Items items = 3;

            message Items {
              // The key to project.
              string key = 1;

              // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
              string mode = 2;

              // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
              string path = 3;
            }
          }

          message ServiceAccountToken {
            // Audience is the intended audience of the token
            string audience = 1;

            // ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
            int64 expiration_seconds = 2 [json_name = "expiration_seconds"];

            // Path specifies a relative path to the mount point of the projected volume.
            string path = 3;
          }
        }
      }

      message Quobyte {
        // Group to map volume access to Default is no group
        string group = 1;

        // Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        bool read_only = 2 [json_name = "read_only"];

        // Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        string registry = 3;

        // User to map volume access to Defaults to serivceaccount user
        string user = 4;

        // Volume is a string that references an already created Quobyte volume by name.
        string volume = 5;
      }

      message Rbd {
        // A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        repeated string ceph_monitors = 1 [json_name = "ceph_monitors"];

        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#rbd
        string fs_type = 2 [json_name = "fs_type"];

        // Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        string keyring = 3;

        // The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        string rados_user = 4 [json_name = "rados_user"];

        // The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        string rbd_image = 5 [json_name = "rbd_image"];

        // The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it.
        string rbd_pool = 6 [json_name = "rbd_pool"];

        // Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        bool read_only = 7 [json_name = "read_only"];

        SecretRef secret_ref = 8 [json_name = "secret_ref"];

        message SecretRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string namespace = 2;
        }
      }

      message Secret {
        // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        string default_mode = 1 [json_name = "default_mode"];

        // Optional: Specify whether the Secret or its keys must be defined.
        bool optional = 2;

        // Name of the secret in the pod's namespace to use. More info: http://kubernetes.io/docs/user-guide/volumes#secrets
        string secret_name = 3 [json_name = "secret_name"];

        repeated Items items = 4;

        message Items {
          // The key to project.
          string key = 1;

          // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
          string mode = 2;

          // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
          string path = 3;
        }
      }

      message VsphereVolume {
        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 1 [json_name = "fs_type"];

        // Path that identifies vSphere volume vmdk
        string volume_path = 2 [json_name = "volume_path"];
      }
    }
  }

  message Timeouts {
    string create = 1;

    string delete = 2;
  }
}

// KubernetesPodDisruptionBudget version is 0
message KubernetesPodDisruptionBudget {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the pod disruption budget that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the pod disruption budget. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the pod disruption budget, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the pod disruption budget must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this pod disruption budget that can be used by clients to determine when pod disruption budget has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this pod disruption budget. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    string max_unavailable = 1 [json_name = "max_unavailable"];

    string min_available = 2 [json_name = "min_available"];

    Selector selector = 3;

    message Selector {
      // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
      map<string, string> match_labels = 1 [json_name = "match_labels"];

      repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

      message MatchExpressions {
        // The label key that the selector applies to.
        string key = 1;

        // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        string operator = 2;

        // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        repeated string values = 3;
      }
    }
  }
}

// KubernetesPodDisruptionBudgetV1 version is 0
message KubernetesPodDisruptionBudgetV1 {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the pod disruption budget that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the pod disruption budget. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the pod disruption budget, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the pod disruption budget must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this pod disruption budget that can be used by clients to determine when pod disruption budget has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this pod disruption budget. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    string max_unavailable = 1 [json_name = "max_unavailable"];

    string min_available = 2 [json_name = "min_available"];

    Selector selector = 3;

    message Selector {
      // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
      map<string, string> match_labels = 1 [json_name = "match_labels"];

      repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

      message MatchExpressions {
        // The label key that the selector applies to.
        string key = 1;

        // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
        string operator = 2;

        // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
        repeated string values = 3;
      }
    }
  }
}

// KubernetesPodSecurityPolicy version is 0
message KubernetesPodSecurityPolicy {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the podsecuritypolicy that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 2;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the podsecuritypolicy. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 3;

    // Name of the podsecuritypolicy, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 4;

    // An opaque value that represents the internal version of this podsecuritypolicy that can be used by clients to determine when podsecuritypolicy has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 5 [json_name = "resource_version"];

    // The unique in time and space value for this podsecuritypolicy. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 6;
  }

  message Spec {
    // allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
    bool allow_privilege_escalation = 1 [json_name = "allow_privilege_escalation"];

    // allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
    repeated string allowed_capabilities = 2 [json_name = "allowed_capabilities"];

    // AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
    repeated string allowed_proc_mount_types = 3 [json_name = "allowed_proc_mount_types"];

    // allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.
    //
    // Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
    repeated string allowed_unsafe_sysctls = 4 [json_name = "allowed_unsafe_sysctls"];

    // defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
    repeated string default_add_capabilities = 5 [json_name = "default_add_capabilities"];

    // defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
    bool default_allow_privilege_escalation = 6 [json_name = "default_allow_privilege_escalation"];

    // forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
    //
    // Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
    repeated string forbidden_sysctls = 7 [json_name = "forbidden_sysctls"];

    // hostIPC determines if the policy allows the use of HostIPC in the pod spec.
    bool host_ipc = 8 [json_name = "host_ipc"];

    // hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
    bool host_network = 9 [json_name = "host_network"];

    // hostPID determines if the policy allows the use of HostPID in the pod spec.
    bool host_pid = 10 [json_name = "host_pid"];

    // privileged determines if a pod can request to be run as privileged.
    bool privileged = 11;

    // readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
    bool read_only_root_filesystem = 12 [json_name = "read_only_root_filesystem"];

    // requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
    repeated string required_drop_capabilities = 13 [json_name = "required_drop_capabilities"];

    // volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
    repeated string volumes = 14;

    repeated AllowedFlexVolumes allowed_flex_volumes = 15 [json_name = "allowed_flex_volumes"];

    repeated AllowedHostPaths allowed_host_paths = 16 [json_name = "allowed_host_paths"];

    FsGroup fs_group = 17 [json_name = "fs_group"];

    repeated HostPorts host_ports = 18 [json_name = "host_ports"];

    RunAsGroup run_as_group = 19 [json_name = "run_as_group"];

    RunAsUser run_as_user = 20 [json_name = "run_as_user"];

    SeLinux se_linux = 21 [json_name = "se_linux"];

    SupplementalGroups supplemental_groups = 22 [json_name = "supplemental_groups"];

    message AllowedFlexVolumes {
      // driver is the name of the Flexvolume driver.
      string driver = 1;
    }

    message AllowedHostPaths {
      // pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
      //
      // Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
      string path_prefix = 1 [json_name = "path_prefix"];

      // when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
      bool read_only = 2 [json_name = "read_only"];
    }

    message FsGroup {
      // rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
      string rule = 1;

      repeated Range range = 2;

      message Range {
        // max is the end of the range, inclusive.
        int64 max = 1;

        // min is the start of the range, inclusive.
        int64 min = 2;
      }
    }

    message HostPorts {
      // max is the end of the range, inclusive.
      int64 max = 1;

      // min is the start of the range, inclusive.
      int64 min = 2;
    }

    message RunAsGroup {
      // rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
      string rule = 1;

      repeated Range range = 2;

      message Range {
        // max is the end of the range, inclusive.
        int64 max = 1;

        // min is the start of the range, inclusive.
        int64 min = 2;
      }
    }

    message RunAsUser {
      // rule is the strategy that will dictate the allowable RunAsUser values that may be set.
      string rule = 1;

      repeated Range range = 2;

      message Range {
        // max is the end of the range, inclusive.
        int64 max = 1;

        // min is the start of the range, inclusive.
        int64 min = 2;
      }
    }

    message SeLinux {
      // rule is the strategy that will dictate the allowable labels that may be set.
      string rule = 1;

      repeated SeLinuxOptions se_linux_options = 2 [json_name = "se_linux_options"];

      message SeLinuxOptions {
        string level = 1;

        string role = 2;

        string type = 3;

        string user = 4;
      }
    }

    message SupplementalGroups {
      // rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
      string rule = 1;

      repeated Range range = 2;

      message Range {
        // max is the end of the range, inclusive.
        int64 max = 1;

        // min is the start of the range, inclusive.
        int64 min = 2;
      }
    }
  }
}

// KubernetesPodSecurityPolicyV1beta1 version is 0
message KubernetesPodSecurityPolicyV1beta1 {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the podsecuritypolicy that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 2;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the podsecuritypolicy. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 3;

    // Name of the podsecuritypolicy, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 4;

    // An opaque value that represents the internal version of this podsecuritypolicy that can be used by clients to determine when podsecuritypolicy has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 5 [json_name = "resource_version"];

    // The unique in time and space value for this podsecuritypolicy. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 6;
  }

  message Spec {
    // allowPrivilegeEscalation determines if a pod can request to allow privilege escalation. If unspecified, defaults to true.
    bool allow_privilege_escalation = 1 [json_name = "allow_privilege_escalation"];

    // allowedCapabilities is a list of capabilities that can be requested to add to the container. Capabilities in this field may be added at the pod author's discretion. You must not list a capability in both allowedCapabilities and requiredDropCapabilities.
    repeated string allowed_capabilities = 2 [json_name = "allowed_capabilities"];

    // AllowedProcMountTypes is an allowlist of allowed ProcMountTypes. Empty or nil indicates that only the DefaultProcMountType may be used. This requires the ProcMountType feature flag to be enabled.
    repeated string allowed_proc_mount_types = 3 [json_name = "allowed_proc_mount_types"];

    // allowedUnsafeSysctls is a list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of allowed sysctls. Single * means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection.
    //
    // Examples: e.g. "foo/*" allows "foo/bar", "foo/baz", etc. e.g. "foo.*" allows "foo.bar", "foo.baz", etc.
    repeated string allowed_unsafe_sysctls = 4 [json_name = "allowed_unsafe_sysctls"];

    // defaultAddCapabilities is the default set of capabilities that will be added to the container unless the pod spec specifically drops the capability.  You may not list a capability in both defaultAddCapabilities and requiredDropCapabilities. Capabilities added here are implicitly allowed, and need not be included in the allowedCapabilities list.
    repeated string default_add_capabilities = 5 [json_name = "default_add_capabilities"];

    // defaultAllowPrivilegeEscalation controls the default setting for whether a process can gain more privileges than its parent process.
    bool default_allow_privilege_escalation = 6 [json_name = "default_allow_privilege_escalation"];

    // forbiddenSysctls is a list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in "*" in which case it is considered as a prefix of forbidden sysctls. Single * means all sysctls are forbidden.
    //
    // Examples: e.g. "foo/*" forbids "foo/bar", "foo/baz", etc. e.g. "foo.*" forbids "foo.bar", "foo.baz", etc.
    repeated string forbidden_sysctls = 7 [json_name = "forbidden_sysctls"];

    // hostIPC determines if the policy allows the use of HostIPC in the pod spec.
    bool host_ipc = 8 [json_name = "host_ipc"];

    // hostNetwork determines if the policy allows the use of HostNetwork in the pod spec.
    bool host_network = 9 [json_name = "host_network"];

    // hostPID determines if the policy allows the use of HostPID in the pod spec.
    bool host_pid = 10 [json_name = "host_pid"];

    // privileged determines if a pod can request to be run as privileged.
    bool privileged = 11;

    // readOnlyRootFilesystem when set to true will force containers to run with a read only root file system.  If the container specifically requests to run with a non-read only root file system the PSP should deny the pod. If set to false the container may run with a read only root file system if it wishes but it will not be forced to.
    bool read_only_root_filesystem = 12 [json_name = "read_only_root_filesystem"];

    // requiredDropCapabilities are the capabilities that will be dropped from the container.  These are required to be dropped and cannot be added.
    repeated string required_drop_capabilities = 13 [json_name = "required_drop_capabilities"];

    // volumes is an allowlist of volume plugins. Empty indicates that no volumes may be used. To allow all volumes you may use '*'.
    repeated string volumes = 14;

    repeated AllowedFlexVolumes allowed_flex_volumes = 15 [json_name = "allowed_flex_volumes"];

    repeated AllowedHostPaths allowed_host_paths = 16 [json_name = "allowed_host_paths"];

    FsGroup fs_group = 17 [json_name = "fs_group"];

    repeated HostPorts host_ports = 18 [json_name = "host_ports"];

    RunAsGroup run_as_group = 19 [json_name = "run_as_group"];

    RunAsUser run_as_user = 20 [json_name = "run_as_user"];

    SeLinux se_linux = 21 [json_name = "se_linux"];

    SupplementalGroups supplemental_groups = 22 [json_name = "supplemental_groups"];

    message AllowedFlexVolumes {
      // driver is the name of the Flexvolume driver.
      string driver = 1;
    }

    message AllowedHostPaths {
      // pathPrefix is the path prefix that the host volume must match. It does not support `*`. Trailing slashes are trimmed when validating the path prefix with a host path.
      //
      // Examples: `/foo` would allow `/foo`, `/foo/` and `/foo/bar` `/foo` would not allow `/food` or `/etc/foo`
      string path_prefix = 1 [json_name = "path_prefix"];

      // when set to true, will allow host volumes matching the pathPrefix only if all volume mounts are readOnly.
      bool read_only = 2 [json_name = "read_only"];
    }

    message FsGroup {
      // rule is the strategy that will dictate what FSGroup is used in the SecurityContext.
      string rule = 1;

      repeated Range range = 2;

      message Range {
        // max is the end of the range, inclusive.
        int64 max = 1;

        // min is the start of the range, inclusive.
        int64 min = 2;
      }
    }

    message HostPorts {
      // max is the end of the range, inclusive.
      int64 max = 1;

      // min is the start of the range, inclusive.
      int64 min = 2;
    }

    message RunAsGroup {
      // rule is the strategy that will dictate the allowable RunAsGroup values that may be set.
      string rule = 1;

      repeated Range range = 2;

      message Range {
        // max is the end of the range, inclusive.
        int64 max = 1;

        // min is the start of the range, inclusive.
        int64 min = 2;
      }
    }

    message RunAsUser {
      // rule is the strategy that will dictate the allowable RunAsUser values that may be set.
      string rule = 1;

      repeated Range range = 2;

      message Range {
        // max is the end of the range, inclusive.
        int64 max = 1;

        // min is the start of the range, inclusive.
        int64 min = 2;
      }
    }

    message SeLinux {
      // rule is the strategy that will dictate the allowable labels that may be set.
      string rule = 1;

      repeated SeLinuxOptions se_linux_options = 2 [json_name = "se_linux_options"];

      message SeLinuxOptions {
        string level = 1;

        string role = 2;

        string type = 3;

        string user = 4;
      }
    }

    message SupplementalGroups {
      // rule is the strategy that will dictate what supplemental groups is used in the SecurityContext.
      string rule = 1;

      repeated Range range = 2;

      message Range {
        // max is the end of the range, inclusive.
        int64 max = 1;

        // min is the start of the range, inclusive.
        int64 min = 2;
      }
    }
  }
}

// KubernetesPodV1 version is 1
message KubernetesPodV1 {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  repeated Timeouts timeouts = 4;

  map<string, string> for_each = 5 [json_name = "for_each"];

  repeated string depends_on = 6 [json_name = "depends_on"];

  int32 count = 7;

  string provider = 8;

  terraform.v1.Lifecycle lifecycle = 9;

  message Metadata {
    // An unstructured key value map stored with the pod that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the pod. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the pod, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the pod must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this pod that can be used by clients to determine when pod has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this pod. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    // Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
    int64 active_deadline_seconds = 1 [json_name = "active_deadline_seconds"];

    // AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
    bool automount_service_account_token = 2 [json_name = "automount_service_account_token"];

    // Set DNS policy for containers within the pod. Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'. Optional: Defaults to 'ClusterFirst', see [Kubernetes reference](https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#pod-s-dns-policy).
    string dns_policy = 3 [json_name = "dns_policy"];

    // Enables generating environment variables for service discovery. Defaults to true.
    bool enable_service_links = 4 [json_name = "enable_service_links"];

    // Use the host's ipc namespace. Optional: Defaults to false.
    bool host_ipc = 5 [json_name = "host_ipc"];

    // Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.
    bool host_network = 6 [json_name = "host_network"];

    // Use the host's pid namespace.
    bool host_pid = 7 [json_name = "host_pid"];

    // Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
    string hostname = 8;

    // NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
    string node_name = 9 [json_name = "node_name"];

    // NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: http://kubernetes.io/docs/user-guide/node-selection.
    map<string, string> node_selector = 10 [json_name = "node_selector"];

    // If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
    string priority_class_name = 11 [json_name = "priority_class_name"];

    // Restart policy for all containers within the pod. One of Always, OnFailure, Never. More info: http://kubernetes.io/docs/user-guide/pod-states#restartpolicy.
    string restart_policy = 12 [json_name = "restart_policy"];

    // RuntimeClassName is a feature for selecting the container runtime configuration. The container runtime configuration is used to run a Pod's containers. More info: https://kubernetes.io/docs/concepts/containers/runtime-class
    string runtime_class_name = 13 [json_name = "runtime_class_name"];

    // If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
    string scheduler_name = 14 [json_name = "scheduler_name"];

    // ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: http://releases.k8s.io/HEAD/docs/design/service_accounts.md.
    string service_account_name = 15 [json_name = "service_account_name"];

    // Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Defaults to false.
    bool share_process_namespace = 16 [json_name = "share_process_namespace"];

    // If specified, the fully qualified Pod hostname will be "...svc.". If not specified, the pod will not have a domainname at all..
    string subdomain = 17;

    // Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.
    int64 termination_grace_period_seconds = 18 [json_name = "termination_grace_period_seconds"];

    Affinity affinity = 19;

    repeated Container container = 20;

    DnsConfig dns_config = 21 [json_name = "dns_config"];

    repeated HostAliases host_aliases = 22 [json_name = "host_aliases"];

    repeated ImagePullSecrets image_pull_secrets = 23 [json_name = "image_pull_secrets"];

    repeated InitContainer init_container = 24 [json_name = "init_container"];

    repeated ReadinessGate readiness_gate = 25 [json_name = "readiness_gate"];

    SecurityContext security_context = 26 [json_name = "security_context"];

    repeated Toleration toleration = 27;

    repeated TopologySpreadConstraint topology_spread_constraint = 28 [json_name = "topology_spread_constraint"];

    repeated Volume volume = 29;

    message Affinity {
      NodeAffinity node_affinity = 1 [json_name = "node_affinity"];

      PodAffinity pod_affinity = 2 [json_name = "pod_affinity"];

      PodAntiAffinity pod_anti_affinity = 3 [json_name = "pod_anti_affinity"];

      message NodeAffinity {
        repeated PreferredDuringSchedulingIgnoredDuringExecution preferred_during_scheduling_ignored_during_execution = 1 [
          json_name = "preferred_during_scheduling_ignored_during_execution"
        ];

        RequiredDuringSchedulingIgnoredDuringExecution required_during_scheduling_ignored_during_execution = 2 [
          json_name = "required_during_scheduling_ignored_during_execution"
        ];

        message PreferredDuringSchedulingIgnoredDuringExecution {
          // weight is in the range 1-100
          int64 weight = 1;

          Preference preference = 2;

          message Preference {
            repeated MatchExpressions match_expressions = 1 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
              string operator = 2;

              // Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message RequiredDuringSchedulingIgnoredDuringExecution {
          repeated NodeSelectorTerm node_selector_term = 1 [json_name = "node_selector_term"];

          message NodeSelectorTerm {
            repeated MatchExpressions match_expressions = 1 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // Operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
              string operator = 2;

              // Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }
      }

      message PodAffinity {
        repeated PreferredDuringSchedulingIgnoredDuringExecution preferred_during_scheduling_ignored_during_execution = 1 [
          json_name = "preferred_during_scheduling_ignored_during_execution"
        ];

        repeated RequiredDuringSchedulingIgnoredDuringExecution required_during_scheduling_ignored_during_execution = 2 [
          json_name = "required_during_scheduling_ignored_during_execution"
        ];

        message PreferredDuringSchedulingIgnoredDuringExecution {
          // weight associated with matching the corresponding podAffinityTerm, in the range 1-100
          int64 weight = 1;

          PodAffinityTerm pod_affinity_term = 2 [json_name = "pod_affinity_term"];

          message PodAffinityTerm {
            // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
            repeated string namespaces = 1;

            // empty topology key is interpreted by the scheduler as 'all topologies'
            string topology_key = 2 [json_name = "topology_key"];

            repeated LabelSelector label_selector = 3 [json_name = "label_selector"];

            message LabelSelector {
              // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
              map<string, string> match_labels = 1 [json_name = "match_labels"];

              repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

              message MatchExpressions {
                // The label key that the selector applies to.
                string key = 1;

                // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
                string operator = 2;

                // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
                repeated string values = 3;
              }
            }
          }
        }

        message RequiredDuringSchedulingIgnoredDuringExecution {
          // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
          repeated string namespaces = 1;

          // empty topology key is interpreted by the scheduler as 'all topologies'
          string topology_key = 2 [json_name = "topology_key"];

          repeated LabelSelector label_selector = 3 [json_name = "label_selector"];

          message LabelSelector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }
      }

      message PodAntiAffinity {
        repeated PreferredDuringSchedulingIgnoredDuringExecution preferred_during_scheduling_ignored_during_execution = 1 [
          json_name = "preferred_during_scheduling_ignored_during_execution"
        ];

        repeated RequiredDuringSchedulingIgnoredDuringExecution required_during_scheduling_ignored_during_execution = 2 [
          json_name = "required_during_scheduling_ignored_during_execution"
        ];

        message PreferredDuringSchedulingIgnoredDuringExecution {
          // weight associated with matching the corresponding podAffinityTerm, in the range 1-100
          int64 weight = 1;

          PodAffinityTerm pod_affinity_term = 2 [json_name = "pod_affinity_term"];

          message PodAffinityTerm {
            // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
            repeated string namespaces = 1;

            // empty topology key is interpreted by the scheduler as 'all topologies'
            string topology_key = 2 [json_name = "topology_key"];

            repeated LabelSelector label_selector = 3 [json_name = "label_selector"];

            message LabelSelector {
              // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
              map<string, string> match_labels = 1 [json_name = "match_labels"];

              repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

              message MatchExpressions {
                // The label key that the selector applies to.
                string key = 1;

                // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
                string operator = 2;

                // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
                repeated string values = 3;
              }
            }
          }
        }

        message RequiredDuringSchedulingIgnoredDuringExecution {
          // namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means 'this pod's namespace'
          repeated string namespaces = 1;

          // empty topology key is interpreted by the scheduler as 'all topologies'
          string topology_key = 2 [json_name = "topology_key"];

          repeated LabelSelector label_selector = 3 [json_name = "label_selector"];

          message LabelSelector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }
      }
    }

    message Container {
      // Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
      repeated string args = 1;

      // Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
      repeated string command = 2;

      // Docker image name. More info: http://kubernetes.io/docs/user-guide/images
      string image = 3;

      // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images
      string image_pull_policy = 4 [json_name = "image_pull_policy"];

      // Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
      string name = 5;

      // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
      bool stdin = 6;

      // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
      bool stdin_once = 7 [json_name = "stdin_once"];

      // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
      string termination_message_path = 8 [json_name = "termination_message_path"];

      // Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
      string termination_message_policy = 9 [json_name = "termination_message_policy"];

      // Whether this container should allocate a TTY for itself
      bool tty = 10;

      // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
      string working_dir = 11 [json_name = "working_dir"];

      repeated Env env = 12;

      repeated EnvFrom env_from = 13 [json_name = "env_from"];

      Lifecycle lifecycle = 14;

      LivenessProbe liveness_probe = 15 [json_name = "liveness_probe"];

      repeated Port port = 16;

      ReadinessProbe readiness_probe = 17 [json_name = "readiness_probe"];

      Resources resources = 18;

      SecurityContext security_context = 19 [json_name = "security_context"];

      StartupProbe startup_probe = 20 [json_name = "startup_probe"];

      repeated VolumeMount volume_mount = 21 [json_name = "volume_mount"];

      message Env {
        // Name of the environment variable. Must be a C_IDENTIFIER
        string name = 1;

        // Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        string value = 2;

        ValueFrom value_from = 3 [json_name = "value_from"];

        message ValueFrom {
          ConfigMapKeyRef config_map_key_ref = 1 [json_name = "config_map_key_ref"];

          FieldRef field_ref = 2 [json_name = "field_ref"];

          ResourceFieldRef resource_field_ref = 3 [json_name = "resource_field_ref"];

          SecretKeyRef secret_key_ref = 4 [json_name = "secret_key_ref"];

          message ConfigMapKeyRef {
            // The key to select.
            string key = 1;

            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 2;

            // Specify whether the ConfigMap or its key must be defined.
            bool optional = 3;
          }

          message FieldRef {
            // Version of the schema the FieldPath is written in terms of, defaults to "v1".
            string api_version = 1 [json_name = "api_version"];

            // Path of the field to select in the specified API version
            string field_path = 2 [json_name = "field_path"];
          }

          message ResourceFieldRef {
            string container_name = 1 [json_name = "container_name"];

            string divisor = 2;

            // Resource to select
            string resource = 3;
          }

          message SecretKeyRef {
            // The key of the secret to select from. Must be a valid secret key.
            string key = 1;

            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 2;

            // Specify whether the Secret or its key must be defined.
            bool optional = 3;
          }
        }
      }

      message EnvFrom {
        // An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        string prefix = 1;

        ConfigMapRef config_map_ref = 2 [json_name = "config_map_ref"];

        SecretRef secret_ref = 3 [json_name = "secret_ref"];

        message ConfigMapRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Specify whether the ConfigMap must be defined
          bool optional = 2;
        }

        message SecretRef {
          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          string name = 1;

          // Specify whether the Secret must be defined
          bool optional = 2;
        }
      }

      message Lifecycle {
        repeated PostStart post_start = 1 [json_name = "post_start"];

        repeated PreStop pre_stop = 2 [json_name = "pre_stop"];

        message PostStart {
          Exec exec = 1;

          HttpGet http_get = 2 [json_name = "http_get"];

          repeated TcpSocket tcp_socket = 3 [json_name = "tcp_socket"];

          message Exec {
            // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            repeated string command = 1;
          }

          message HttpGet {
            // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            string host = 1;

            // Path to access on the HTTP server.
            string path = 2;

            // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 3;

            // Scheme to use for connecting to the host.
            string scheme = 4;

            repeated HttpHeader http_header = 5 [json_name = "http_header"];

            message HttpHeader {
              // The header field name
              string name = 1;

              // The header field value
              string value = 2;
            }
          }

          message TcpSocket {
            // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 1;
          }
        }

        message PreStop {
          Exec exec = 1;

          HttpGet http_get = 2 [json_name = "http_get"];

          repeated TcpSocket tcp_socket = 3 [json_name = "tcp_socket"];

          message Exec {
            // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            repeated string command = 1;
          }

          message HttpGet {
            // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            string host = 1;

            // Path to access on the HTTP server.
            string path = 2;

            // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 3;

            // Scheme to use for connecting to the host.
            string scheme = 4;

            repeated HttpHeader http_header = 5 [json_name = "http_header"];

            message HttpHeader {
              // The header field name
              string name = 1;

              // The header field value
              string value = 2;
            }
          }

          message TcpSocket {
            // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 1;
          }
        }
      }

      message LivenessProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message Port {
        // Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        int64 container_port = 1 [json_name = "container_port"];

        // What host IP to bind the external port to.
        string host_ip = 2 [json_name = "host_ip"];

        // Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        int64 host_port = 3 [json_name = "host_port"];

        // If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        string name = 4;

        // Protocol for port. Must be UDP or TCP. Defaults to "TCP".
        string protocol = 5;
      }

      message ReadinessProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message Resources {
        // Describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        map<string, string> limits = 1;

        // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        map<string, string> requests = 2;
      }

      message SecurityContext {
        // AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        bool allow_privilege_escalation = 1 [json_name = "allow_privilege_escalation"];

        // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        bool privileged = 2;

        // Whether this container has a read-only root filesystem. Default is false.
        bool read_only_root_filesystem = 3 [json_name = "read_only_root_filesystem"];

        // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        string run_as_group = 4 [json_name = "run_as_group"];

        // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        bool run_as_non_root = 5 [json_name = "run_as_non_root"];

        // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        string run_as_user = 6 [json_name = "run_as_user"];

        Capabilities capabilities = 7;

        SeLinuxOptions se_linux_options = 8 [json_name = "se_linux_options"];

        SeccompProfile seccomp_profile = 9 [json_name = "seccomp_profile"];

        message Capabilities {
          // Added capabilities
          repeated string add = 1;

          // Removed capabilities
          repeated string drop = 2;
        }

        message SeLinuxOptions {
          // Level is SELinux level label that applies to the container.
          string level = 1;

          // Role is a SELinux role label that applies to the container.
          string role = 2;

          // Type is a SELinux type label that applies to the container.
          string type = 3;

          // User is a SELinux user label that applies to the container.
          string user = 4;
        }

        message SeccompProfile {
          // Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
          string localhost_profile = 1 [json_name = "localhost_profile"];

          // Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
          string type = 2;
        }
      }

      message StartupProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message VolumeMount {
        // Path within the container at which the volume should be mounted. Must not contain ':'.
        string mount_path = 1 [json_name = "mount_path"];

        // Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
        string mount_propagation = 2 [json_name = "mount_propagation"];

        // This must match the Name of a Volume.
        string name = 3;

        // Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        bool read_only = 4 [json_name = "read_only"];

        // Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        string sub_path = 5 [json_name = "sub_path"];
      }
    }

    message DnsConfig {
      // A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
      repeated string nameservers = 1;

      // A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
      repeated string searches = 2;

      repeated Option option = 3;

      message Option {
        // Name of the option.
        string name = 1;

        // Value of the option. Optional: Defaults to empty.
        string value = 2;
      }
    }

    message HostAliases {
      // Hostnames for the IP address.
      repeated string hostnames = 1;

      // IP address of the host file entry.
      string ip = 2;
    }

    message ImagePullSecrets {
      // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      string name = 1;
    }

    message InitContainer {
      // Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
      repeated string args = 1;

      // Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/containers#containers-and-commands
      repeated string command = 2;

      // Docker image name. More info: http://kubernetes.io/docs/user-guide/images
      string image = 3;

      // Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/images#updating-images
      string image_pull_policy = 4 [json_name = "image_pull_policy"];

      // Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
      string name = 5;

      // Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.
      bool stdin = 6;

      // Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.
      bool stdin_once = 7 [json_name = "stdin_once"];

      // Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Defaults to /dev/termination-log. Cannot be updated.
      string termination_message_path = 8 [json_name = "termination_message_path"];

      // Optional: Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
      string termination_message_policy = 9 [json_name = "termination_message_policy"];

      // Whether this container should allocate a TTY for itself
      bool tty = 10;

      // Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
      string working_dir = 11 [json_name = "working_dir"];

      repeated Env env = 12;

      repeated EnvFrom env_from = 13 [json_name = "env_from"];

      Lifecycle lifecycle = 14;

      LivenessProbe liveness_probe = 15 [json_name = "liveness_probe"];

      repeated Port port = 16;

      ReadinessProbe readiness_probe = 17 [json_name = "readiness_probe"];

      Resources resources = 18;

      SecurityContext security_context = 19 [json_name = "security_context"];

      StartupProbe startup_probe = 20 [json_name = "startup_probe"];

      repeated VolumeMount volume_mount = 21 [json_name = "volume_mount"];

      message Env {
        // Name of the environment variable. Must be a C_IDENTIFIER
        string name = 1;

        // Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
        string value = 2;

        ValueFrom value_from = 3 [json_name = "value_from"];

        message ValueFrom {
          ConfigMapKeyRef config_map_key_ref = 1 [json_name = "config_map_key_ref"];

          FieldRef field_ref = 2 [json_name = "field_ref"];

          ResourceFieldRef resource_field_ref = 3 [json_name = "resource_field_ref"];

          SecretKeyRef secret_key_ref = 4 [json_name = "secret_key_ref"];

          message ConfigMapKeyRef {
            // The key to select.
            string key = 1;

            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 2;

            // Specify whether the ConfigMap or its key must be defined.
            bool optional = 3;
          }

          message FieldRef {
            // Version of the schema the FieldPath is written in terms of, defaults to "v1".
            string api_version = 1 [json_name = "api_version"];

            // Path of the field to select in the specified API version
            string field_path = 2 [json_name = "field_path"];
          }

          message ResourceFieldRef {
            string container_name = 1 [json_name = "container_name"];

            string divisor = 2;

            // Resource to select
            string resource = 3;
          }

          message SecretKeyRef {
            // The key of the secret to select from. Must be a valid secret key.
            string key = 1;

            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 2;

            // Specify whether the Secret or its key must be defined.
            bool optional = 3;
          }
        }
      }

      message EnvFrom {
        // An optional identifer to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
        string prefix = 1;

        ConfigMapRef config_map_ref = 2 [json_name = "config_map_ref"];

        SecretRef secret_ref = 3 [json_name = "secret_ref"];

        message ConfigMapRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Specify whether the ConfigMap must be defined
          bool optional = 2;
        }

        message SecretRef {
          // Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
          string name = 1;

          // Specify whether the Secret must be defined
          bool optional = 2;
        }
      }

      message Lifecycle {
        repeated PostStart post_start = 1 [json_name = "post_start"];

        repeated PreStop pre_stop = 2 [json_name = "pre_stop"];

        message PostStart {
          Exec exec = 1;

          HttpGet http_get = 2 [json_name = "http_get"];

          repeated TcpSocket tcp_socket = 3 [json_name = "tcp_socket"];

          message Exec {
            // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            repeated string command = 1;
          }

          message HttpGet {
            // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            string host = 1;

            // Path to access on the HTTP server.
            string path = 2;

            // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 3;

            // Scheme to use for connecting to the host.
            string scheme = 4;

            repeated HttpHeader http_header = 5 [json_name = "http_header"];

            message HttpHeader {
              // The header field name
              string name = 1;

              // The header field value
              string value = 2;
            }
          }

          message TcpSocket {
            // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 1;
          }
        }

        message PreStop {
          Exec exec = 1;

          HttpGet http_get = 2 [json_name = "http_get"];

          repeated TcpSocket tcp_socket = 3 [json_name = "tcp_socket"];

          message Exec {
            // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
            repeated string command = 1;
          }

          message HttpGet {
            // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
            string host = 1;

            // Path to access on the HTTP server.
            string path = 2;

            // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 3;

            // Scheme to use for connecting to the host.
            string scheme = 4;

            repeated HttpHeader http_header = 5 [json_name = "http_header"];

            message HttpHeader {
              // The header field name
              string name = 1;

              // The header field value
              string value = 2;
            }
          }

          message TcpSocket {
            // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
            string port = 1;
          }
        }
      }

      message LivenessProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message Port {
        // Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
        int64 container_port = 1 [json_name = "container_port"];

        // What host IP to bind the external port to.
        string host_ip = 2 [json_name = "host_ip"];

        // Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
        int64 host_port = 3 [json_name = "host_port"];

        // If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services
        string name = 4;

        // Protocol for port. Must be UDP or TCP. Defaults to "TCP".
        string protocol = 5;
      }

      message ReadinessProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message Resources {
        // Describes the maximum amount of compute resources allowed. More info: http://kubernetes.io/docs/user-guide/compute-resources/
        map<string, string> limits = 1;

        // Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        map<string, string> requests = 2;
      }

      message SecurityContext {
        // AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
        bool allow_privilege_escalation = 1 [json_name = "allow_privilege_escalation"];

        // Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        bool privileged = 2;

        // Whether this container has a read-only root filesystem. Default is false.
        bool read_only_root_filesystem = 3 [json_name = "read_only_root_filesystem"];

        // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        string run_as_group = 4 [json_name = "run_as_group"];

        // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        bool run_as_non_root = 5 [json_name = "run_as_non_root"];

        // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        string run_as_user = 6 [json_name = "run_as_user"];

        Capabilities capabilities = 7;

        SeLinuxOptions se_linux_options = 8 [json_name = "se_linux_options"];

        SeccompProfile seccomp_profile = 9 [json_name = "seccomp_profile"];

        message Capabilities {
          // Added capabilities
          repeated string add = 1;

          // Removed capabilities
          repeated string drop = 2;
        }

        message SeLinuxOptions {
          // Level is SELinux level label that applies to the container.
          string level = 1;

          // Role is a SELinux role label that applies to the container.
          string role = 2;

          // Type is a SELinux type label that applies to the container.
          string type = 3;

          // User is a SELinux user label that applies to the container.
          string user = 4;
        }

        message SeccompProfile {
          // Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
          string localhost_profile = 1 [json_name = "localhost_profile"];

          // Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
          string type = 2;
        }
      }

      message StartupProbe {
        // Minimum consecutive failures for the probe to be considered failed after having succeeded.
        int64 failure_threshold = 1 [json_name = "failure_threshold"];

        // Number of seconds after the container has started before liveness probes are initiated. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 initial_delay_seconds = 2 [json_name = "initial_delay_seconds"];

        // How often (in seconds) to perform the probe
        int64 period_seconds = 3 [json_name = "period_seconds"];

        // Minimum consecutive successes for the probe to be considered successful after having failed.
        int64 success_threshold = 4 [json_name = "success_threshold"];

        // Number of seconds after which the probe times out. More info: http://kubernetes.io/docs/user-guide/pod-states#container-probes
        int64 timeout_seconds = 5 [json_name = "timeout_seconds"];

        Exec exec = 6;

        repeated Grpc grpc = 7;

        HttpGet http_get = 8 [json_name = "http_get"];

        repeated TcpSocket tcp_socket = 9 [json_name = "tcp_socket"];

        message Exec {
          // Command is the command line to execute inside the container, the working directory for the command is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
          repeated string command = 1;
        }

        message Grpc {
          // Number of the port to access on the container. Number must be in the range 1 to 65535.
          int64 port = 1;

          // Name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md). If this is not specified, the default behavior is defined by gRPC.
          string service = 2;
        }

        message HttpGet {
          // Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
          string host = 1;

          // Path to access on the HTTP server.
          string path = 2;

          // Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 3;

          // Scheme to use for connecting to the host.
          string scheme = 4;

          repeated HttpHeader http_header = 5 [json_name = "http_header"];

          message HttpHeader {
            // The header field name
            string name = 1;

            // The header field value
            string value = 2;
          }
        }

        message TcpSocket {
          // Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
          string port = 1;
        }
      }

      message VolumeMount {
        // Path within the container at which the volume should be mounted. Must not contain ':'.
        string mount_path = 1 [json_name = "mount_path"];

        // Mount propagation mode. mount_propagation determines how mounts are propagated from the host to container and the other way around. Valid values are None (default), HostToContainer and Bidirectional.
        string mount_propagation = 2 [json_name = "mount_propagation"];

        // This must match the Name of a Volume.
        string name = 3;

        // Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        bool read_only = 4 [json_name = "read_only"];

        // Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
        string sub_path = 5 [json_name = "sub_path"];
      }
    }

    message ReadinessGate {
      // refers to a condition in the pod's condition list with matching type.
      string condition_type = 1 [json_name = "condition_type"];
    }

    message SecurityContext {
      // A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw---- If unset, the Kubelet will not modify the ownership and permissions of any volume.
      string fs_group = 1 [json_name = "fs_group"];

      // fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir.
      string fs_group_change_policy = 2 [json_name = "fs_group_change_policy"];

      // The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
      string run_as_group = 3 [json_name = "run_as_group"];

      // Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
      bool run_as_non_root = 4 [json_name = "run_as_non_root"];

      // The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
      string run_as_user = 5 [json_name = "run_as_user"];

      // A list of groups applied to the first process run in each container, in addition to the container's primary GID. If unspecified, no groups will be added to any container.
      repeated int64 supplemental_groups = 6 [json_name = "supplemental_groups"];

      SeLinuxOptions se_linux_options = 7 [json_name = "se_linux_options"];

      SeccompProfile seccomp_profile = 8 [json_name = "seccomp_profile"];

      repeated Sysctl sysctl = 9;

      message SeLinuxOptions {
        // Level is SELinux level label that applies to the container.
        string level = 1;

        // Role is a SELinux role label that applies to the container.
        string role = 2;

        // Type is a SELinux type label that applies to the container.
        string type = 3;

        // User is a SELinux user label that applies to the container.
        string user = 4;
      }

      message SeccompProfile {
        // Localhost Profile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work.
        string localhost_profile = 1 [json_name = "localhost_profile"];

        // Type indicates which kind of seccomp profile will be applied. Valid options are: Localhost, RuntimeDefault, Unconfined.
        string type = 2;
      }

      message Sysctl {
        // Name of a property to set.
        string name = 1;

        // Value of a property to set.
        string value = 2;
      }
    }

    message Toleration {
      // Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
      string effect = 1;

      // Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
      string key = 2;

      // Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
      string operator = 3;

      // TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
      string toleration_seconds = 4 [json_name = "toleration_seconds"];

      // Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
      string value = 5;
    }

    message TopologySpreadConstraint {
      // describes the degree to which pods may be unevenly distributed.
      int64 max_skew = 1 [json_name = "max_skew"];

      // the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology.
      string topology_key = 2 [json_name = "topology_key"];

      // indicates how to deal with a pod if it doesn't satisfy the spread constraint.
      string when_unsatisfiable = 3 [json_name = "when_unsatisfiable"];

      repeated LabelSelector label_selector = 4 [json_name = "label_selector"];

      message LabelSelector {
        // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        map<string, string> match_labels = 1 [json_name = "match_labels"];

        repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

        message MatchExpressions {
          // The label key that the selector applies to.
          string key = 1;

          // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
          string operator = 2;

          // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
          repeated string values = 3;
        }
      }
    }

    message Volume {
      // Volume's name. Must be a DNS_LABEL and unique within the pod. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      string name = 1;

      AwsElasticBlockStore aws_elastic_block_store = 2 [json_name = "aws_elastic_block_store"];

      AzureDisk azure_disk = 3 [json_name = "azure_disk"];

      AzureFile azure_file = 4 [json_name = "azure_file"];

      CephFs ceph_fs = 5 [json_name = "ceph_fs"];

      Cinder cinder = 6;

      ConfigMap config_map = 7 [json_name = "config_map"];

      Csi csi = 8;

      DownwardApi downward_api = 9 [json_name = "downward_api"];

      EmptyDir empty_dir = 10 [json_name = "empty_dir"];

      Fc fc = 11;

      FlexVolume flex_volume = 12 [json_name = "flex_volume"];

      Flocker flocker = 13;

      GcePersistentDisk gce_persistent_disk = 14 [json_name = "gce_persistent_disk"];

      GitRepo git_repo = 15 [json_name = "git_repo"];

      Glusterfs glusterfs = 16;

      HostPath host_path = 17 [json_name = "host_path"];

      Iscsi iscsi = 18;

      Local local = 19;

      Nfs nfs = 20;

      PersistentVolumeClaim persistent_volume_claim = 21 [json_name = "persistent_volume_claim"];

      PhotonPersistentDisk photon_persistent_disk = 22 [json_name = "photon_persistent_disk"];

      repeated Projected projected = 23;

      Quobyte quobyte = 24;

      Rbd rbd = 25;

      Secret secret = 26;

      VsphereVolume vsphere_volume = 27 [json_name = "vsphere_volume"];

      message AwsElasticBlockStore {
        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
        string fs_type = 1 [json_name = "fs_type"];

        // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        int64 partition = 2;

        // Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
        bool read_only = 3 [json_name = "read_only"];

        // Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: http://kubernetes.io/docs/user-guide/volumes#awselasticblockstore
        string volume_id = 4 [json_name = "volume_id"];
      }

      message AzureDisk {
        // Host Caching mode: None, Read Only, Read Write.
        string caching_mode = 1 [json_name = "caching_mode"];

        // The URI the data disk in the blob storage
        string data_disk_uri = 2 [json_name = "data_disk_uri"];

        // The Name of the data disk in the blob storage
        string disk_name = 3 [json_name = "disk_name"];

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 4 [json_name = "fs_type"];

        // The type for the data disk. Expected values: Shared, Dedicated, Managed. Defaults to Shared
        string kind = 5;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        bool read_only = 6 [json_name = "read_only"];
      }

      message AzureFile {
        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        bool read_only = 1 [json_name = "read_only"];

        // The name of secret that contains Azure Storage Account Name and Key
        string secret_name = 2 [json_name = "secret_name"];

        // The namespace of the secret that contains Azure Storage Account Name and Key. For Kubernetes up to 1.18.x the default is the same as the Pod. For Kubernetes 1.19.x and later the default is "default" namespace.
        string secret_namespace = 3 [json_name = "secret_namespace"];

        // Share Name
        string share_name = 4 [json_name = "share_name"];
      }

      message CephFs {
        // Monitors is a collection of Ceph monitors More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        repeated string monitors = 1;

        // Used as the mounted root, rather than the full Ceph tree, default is /
        string path = 2;

        // Whether to force the read-only setting in VolumeMounts. Defaults to `false` (read/write). More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        bool read_only = 3 [json_name = "read_only"];

        // The path to key ring for User, default is /etc/ceph/user.secret More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        string secret_file = 4 [json_name = "secret_file"];

        // User is the rados user name, default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it
        string user = 5;

        SecretRef secret_ref = 6 [json_name = "secret_ref"];

        message SecretRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string namespace = 2;
        }
      }

      message Cinder {
        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        string fs_type = 1 [json_name = "fs_type"];

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write). More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        bool read_only = 2 [json_name = "read_only"];

        // Volume ID used to identify the volume in Cinder. More info: http://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        string volume_id = 3 [json_name = "volume_id"];
      }

      message ConfigMap {
        // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        string default_mode = 1 [json_name = "default_mode"];

        // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
        string name = 2;

        // Optional: Specify whether the ConfigMap or its keys must be defined.
        bool optional = 3;

        repeated Items items = 4;

        message Items {
          // The key to project.
          string key = 1;

          // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
          string mode = 2;

          // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
          string path = 3;
        }
      }

      message Csi {
        // the name of the volume driver to use. More info: https://kubernetes.io/docs/concepts/storage/volumes/#csi
        string driver = 1;

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 2 [json_name = "fs_type"];

        // Whether to set the read-only property in VolumeMounts to "true". If omitted, the default is "false". More info: http://kubernetes.io/docs/user-guide/volumes#csi
        bool read_only = 3 [json_name = "read_only"];

        // Attributes of the volume to publish.
        map<string, string> volume_attributes = 4 [json_name = "volume_attributes"];

        NodePublishSecretRef node_publish_secret_ref = 5 [json_name = "node_publish_secret_ref"];

        message NodePublishSecretRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;
        }
      }

      message DownwardApi {
        // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        string default_mode = 1 [json_name = "default_mode"];

        repeated Items items = 2;

        message Items {
          // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
          string mode = 1;

          // Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
          string path = 2;

          FieldRef field_ref = 3 [json_name = "field_ref"];

          ResourceFieldRef resource_field_ref = 4 [json_name = "resource_field_ref"];

          message FieldRef {
            // Version of the schema the FieldPath is written in terms of, defaults to "v1".
            string api_version = 1 [json_name = "api_version"];

            // Path of the field to select in the specified API version
            string field_path = 2 [json_name = "field_path"];
          }

          message ResourceFieldRef {
            string container_name = 1 [json_name = "container_name"];

            string divisor = 2;

            // Resource to select
            string resource = 3;
          }
        }
      }

      message EmptyDir {
        // What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
        string medium = 1;

        // Total amount of local storage required for this EmptyDir volume.
        string size_limit = 2 [json_name = "size_limit"];
      }

      message Fc {
        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 1 [json_name = "fs_type"];

        // FC target lun number
        int64 lun = 2;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false (read/write).
        bool read_only = 3 [json_name = "read_only"];

        // FC target worldwide names (WWNs)
        repeated string target_ww_ns = 4 [json_name = "target_ww_ns"];
      }

      message FlexVolume {
        // Driver is the name of the driver to use for this volume.
        string driver = 1;

        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
        string fs_type = 2 [json_name = "fs_type"];

        // Extra command options if any.
        map<string, string> options = 3;

        // Whether to force the ReadOnly setting in VolumeMounts. Defaults to false (read/write).
        bool read_only = 4 [json_name = "read_only"];

        SecretRef secret_ref = 5 [json_name = "secret_ref"];

        message SecretRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string namespace = 2;
        }
      }

      message Flocker {
        // Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        string dataset_name = 1 [json_name = "dataset_name"];

        // UUID of the dataset. This is unique identifier of a Flocker dataset
        string dataset_uuid = 2 [json_name = "dataset_uuid"];
      }

      message GcePersistentDisk {
        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        string fs_type = 1 [json_name = "fs_type"];

        // The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        int64 partition = 2;

        // Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        string pd_name = 3 [json_name = "pd_name"];

        // Whether to force the ReadOnly setting in VolumeMounts. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#gcepersistentdisk
        bool read_only = 4 [json_name = "read_only"];
      }

      message GitRepo {
        // Target directory name. Must not contain or start with '..'. If '.' is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
        string directory = 1;

        // Repository URL
        string repository = 2;

        // Commit hash for the specified revision.
        string revision = 3;
      }

      message Glusterfs {
        // The endpoint name that details Glusterfs topology. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        string endpoints_name = 1 [json_name = "endpoints_name"];

        // The Glusterfs volume path. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        string path = 2;

        // Whether to force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod
        bool read_only = 3 [json_name = "read_only"];
      }

      message HostPath {
        // Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#hostpath
        string path = 1;

        // Type for HostPath volume. Allowed values are "" (default), DirectoryOrCreate, Directory, FileOrCreate, File, Socket, CharDevice and BlockDevice
        string type = 2;
      }

      message Iscsi {
        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#iscsi
        string fs_type = 1 [json_name = "fs_type"];

        // Target iSCSI Qualified Name.
        string iqn = 2;

        // iSCSI interface name that uses an iSCSI transport. Defaults to 'default' (tcp).
        string iscsi_interface = 3 [json_name = "iscsi_interface"];

        // iSCSI target lun number.
        int64 lun = 4;

        // Whether to force the read-only setting in VolumeMounts. Defaults to false.
        bool read_only = 5 [json_name = "read_only"];

        // iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        string target_portal = 6 [json_name = "target_portal"];
      }

      message Local {
        // Path of the directory on the host. More info: http://kubernetes.io/docs/user-guide/volumes#local
        string path = 1;
      }

      message Nfs {
        // Path that is exported by the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
        string path = 1;

        // Whether to force the NFS export to be mounted with read-only permissions. Defaults to false. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
        bool read_only = 2 [json_name = "read_only"];

        // Server is the hostname or IP address of the NFS server. More info: http://kubernetes.io/docs/user-guide/volumes#nfs
        string server = 3;
      }

      message PersistentVolumeClaim {
        // ClaimName is the name of a PersistentVolumeClaim in the same
        string claim_name = 1 [json_name = "claim_name"];

        // Will force the ReadOnly setting in VolumeMounts.
        bool read_only = 2 [json_name = "read_only"];
      }

      message PhotonPersistentDisk {
        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 1 [json_name = "fs_type"];

        // ID that identifies Photon Controller persistent disk
        string pd_id = 2 [json_name = "pd_id"];
      }

      message Projected {
        // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        string default_mode = 1 [json_name = "default_mode"];

        repeated Sources sources = 2;

        message Sources {
          repeated ConfigMap config_map = 1 [json_name = "config_map"];

          DownwardApi downward_api = 2 [json_name = "downward_api"];

          repeated Secret secret = 3;

          ServiceAccountToken service_account_token = 4 [json_name = "service_account_token"];

          message ConfigMap {
            // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
            string name = 1;

            // Optional: Specify whether the ConfigMap or it's keys must be defined.
            bool optional = 2;

            repeated Items items = 3;

            message Items {
              // The key to project.
              string key = 1;

              // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
              string mode = 2;

              // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
              string path = 3;
            }
          }

          message DownwardApi {
            repeated Items items = 1;

            message Items {
              // Mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
              string mode = 1;

              // Path is the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
              string path = 2;

              FieldRef field_ref = 3 [json_name = "field_ref"];

              ResourceFieldRef resource_field_ref = 4 [json_name = "resource_field_ref"];

              message FieldRef {
                // Version of the schema the FieldPath is written in terms of, defaults to 'v1'.
                string api_version = 1 [json_name = "api_version"];

                // Path of the field to select in the specified API version
                string field_path = 2 [json_name = "field_path"];
              }

              message ResourceFieldRef {
                string container_name = 1 [json_name = "container_name"];

                string divisor = 2;

                // Resource to select
                string resource = 3;
              }
            }
          }

          message Secret {
            // Name of the secret in the pod's namespace to use. More info: http://kubernetes.io/docs/user-guide/volumes#secrets
            string name = 1;

            // Optional: Specify whether the Secret or it's keys must be defined.
            bool optional = 2;

            repeated Items items = 3;

            message Items {
              // The key to project.
              string key = 1;

              // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
              string mode = 2;

              // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
              string path = 3;
            }
          }

          message ServiceAccountToken {
            // Audience is the intended audience of the token
            string audience = 1;

            // ExpirationSeconds is the expected duration of validity of the service account token. It defaults to 1 hour and must be at least 10 minutes (600 seconds).
            int64 expiration_seconds = 2 [json_name = "expiration_seconds"];

            // Path specifies a relative path to the mount point of the projected volume.
            string path = 3;
          }
        }
      }

      message Quobyte {
        // Group to map volume access to Default is no group
        string group = 1;

        // Whether to force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        bool read_only = 2 [json_name = "read_only"];

        // Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        string registry = 3;

        // User to map volume access to Defaults to serivceaccount user
        string user = 4;

        // Volume is a string that references an already created Quobyte volume by name.
        string volume = 5;
      }

      message Rbd {
        // A collection of Ceph monitors. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        repeated string ceph_monitors = 1 [json_name = "ceph_monitors"];

        // Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: http://kubernetes.io/docs/user-guide/volumes#rbd
        string fs_type = 2 [json_name = "fs_type"];

        // Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        string keyring = 3;

        // The rados user name. Default is admin. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        string rados_user = 4 [json_name = "rados_user"];

        // The rados image name. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        string rbd_image = 5 [json_name = "rbd_image"];

        // The rados pool name. Default is rbd. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it.
        string rbd_pool = 6 [json_name = "rbd_pool"];

        // Whether to force the read-only setting in VolumeMounts. Defaults to false. More info: http://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it
        bool read_only = 7 [json_name = "read_only"];

        SecretRef secret_ref = 8 [json_name = "secret_ref"];

        message SecretRef {
          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 1;

          // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string namespace = 2;
        }
      }

      message Secret {
        // Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        string default_mode = 1 [json_name = "default_mode"];

        // Optional: Specify whether the Secret or its keys must be defined.
        bool optional = 2;

        // Name of the secret in the pod's namespace to use. More info: http://kubernetes.io/docs/user-guide/volumes#secrets
        string secret_name = 3 [json_name = "secret_name"];

        repeated Items items = 4;

        message Items {
          // The key to project.
          string key = 1;

          // Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
          string mode = 2;

          // The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
          string path = 3;
        }
      }

      message VsphereVolume {
        // Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        string fs_type = 1 [json_name = "fs_type"];

        // Path that identifies vSphere volume vmdk
        string volume_path = 2 [json_name = "volume_path"];
      }
    }
  }

  message Timeouts {
    string create = 1;

    string delete = 2;
  }
}
