syntax = "proto3";

// Provider: kubernetes 2.20.0
package terraform.kubernetes.resources.v2;

import "terraform/v1/meta.proto";

// KubernetesHorizontalPodAutoscaler version is 0
message KubernetesHorizontalPodAutoscaler {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the horizontal pod autoscaler that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the horizontal pod autoscaler. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the horizontal pod autoscaler, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the horizontal pod autoscaler must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this horizontal pod autoscaler that can be used by clients to determine when horizontal pod autoscaler has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this horizontal pod autoscaler. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    // Upper limit for the number of pods that can be set by the autoscaler.
    int64 max_replicas = 1 [json_name = "max_replicas"];

    // Lower limit for the number of pods that can be set by the autoscaler, defaults to `1`.
    int64 min_replicas = 2 [json_name = "min_replicas"];

    // Target average CPU utilization (represented as a percentage of requested CPU) over all the pods. If not specified the default autoscaling policy will be used.
    int64 target_cpu_utilization_percentage = 3 [json_name = "target_cpu_utilization_percentage"];

    Behavior behavior = 4;

    repeated Metric metric = 5;

    ScaleTargetRef scale_target_ref = 6 [json_name = "scale_target_ref"];

    message Behavior {
      repeated ScaleDown scale_down = 1 [json_name = "scale_down"];

      repeated ScaleUp scale_up = 2 [json_name = "scale_up"];

      message ScaleDown {
        // Used to specify which policy should be used. If not set, the default value Max is used.
        string select_policy = 1 [json_name = "select_policy"];

        // Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
        int64 stabilization_window_seconds = 2 [json_name = "stabilization_window_seconds"];

        repeated Policy policy = 3;

        message Policy {
          // Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
          int64 period_seconds = 1 [json_name = "period_seconds"];

          // Type is used to specify the scaling policy: Percent or Pods
          string type = 2;

          // Value contains the amount of change which is permitted by the policy. It must be greater than zero.
          int64 value = 3;
        }
      }

      message ScaleUp {
        // Used to specify which policy should be used. If not set, the default value Max is used.
        string select_policy = 1 [json_name = "select_policy"];

        // Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
        int64 stabilization_window_seconds = 2 [json_name = "stabilization_window_seconds"];

        repeated Policy policy = 3;

        message Policy {
          // Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
          int64 period_seconds = 1 [json_name = "period_seconds"];

          // Type is used to specify the scaling policy: Percent or Pods
          string type = 2;

          // Value contains the amount of change which is permitted by the policy. It must be greater than zero.
          int64 value = 3;
        }
      }
    }

    message Metric {
      // type is the type of metric source. It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
      string type = 1;

      ContainerResource container_resource = 2 [json_name = "container_resource"];

      External external = 3;

      Object object = 4;

      Pods pods = 5;

      Resource resource = 6;

      message ContainerResource {
        // name of the container in the pods of the scaling target
        string container = 1;

        // name of the resource in question
        string name = 2;

        Target target = 3;

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message External {
        Metric metric = 1;

        Target target = 2;

        message Metric {
          // name is the name of the given metric
          string name = 1;

          repeated Selector selector = 2;

          message Selector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message Object {
        DescribedObject described_object = 1 [json_name = "described_object"];

        Metric metric = 2;

        Target target = 3;

        message DescribedObject {
          // API version of the referent
          string api_version = 1 [json_name = "api_version"];

          // Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          string kind = 2;

          // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 3;
        }

        message Metric {
          // name is the name of the given metric
          string name = 1;

          repeated Selector selector = 2;

          message Selector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message Pods {
        Metric metric = 1;

        Target target = 2;

        message Metric {
          // name is the name of the given metric
          string name = 1;

          repeated Selector selector = 2;

          message Selector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message Resource {
        // name is the name of the resource in question.
        string name = 1;

        Target target = 2;

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }
    }

    message ScaleTargetRef {
      // API version of the referent
      string api_version = 1 [json_name = "api_version"];

      // Kind of the referent. e.g. `ReplicationController`. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
      string kind = 2;

      // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      string name = 3;
    }
  }
}

// KubernetesHorizontalPodAutoscalerV1 version is 0
message KubernetesHorizontalPodAutoscalerV1 {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the horizontal pod autoscaler that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the horizontal pod autoscaler. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the horizontal pod autoscaler, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the horizontal pod autoscaler must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this horizontal pod autoscaler that can be used by clients to determine when horizontal pod autoscaler has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this horizontal pod autoscaler. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    // Upper limit for the number of pods that can be set by the autoscaler.
    int64 max_replicas = 1 [json_name = "max_replicas"];

    // Lower limit for the number of pods that can be set by the autoscaler, defaults to `1`.
    int64 min_replicas = 2 [json_name = "min_replicas"];

    // Target average CPU utilization (represented as a percentage of requested CPU) over all the pods. If not specified the default autoscaling policy will be used.
    int64 target_cpu_utilization_percentage = 3 [json_name = "target_cpu_utilization_percentage"];

    ScaleTargetRef scale_target_ref = 4 [json_name = "scale_target_ref"];

    message ScaleTargetRef {
      // API version of the referent
      string api_version = 1 [json_name = "api_version"];

      // Kind of the referent. e.g. `ReplicationController`. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
      string kind = 2;

      // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      string name = 3;
    }
  }
}

// KubernetesHorizontalPodAutoscalerV2 version is 0
message KubernetesHorizontalPodAutoscalerV2 {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the horizontal pod autoscaler that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the horizontal pod autoscaler. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the horizontal pod autoscaler, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the horizontal pod autoscaler must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this horizontal pod autoscaler that can be used by clients to determine when horizontal pod autoscaler has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this horizontal pod autoscaler. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    // Upper limit for the number of pods that can be set by the autoscaler.
    int64 max_replicas = 1 [json_name = "max_replicas"];

    // Lower limit for the number of pods that can be set by the autoscaler, defaults to `1`.
    int64 min_replicas = 2 [json_name = "min_replicas"];

    // Target average CPU utilization (represented as a percentage of requested CPU) over all the pods. If not specified the default autoscaling policy will be used.
    int64 target_cpu_utilization_percentage = 3 [json_name = "target_cpu_utilization_percentage"];

    Behavior behavior = 4;

    repeated Metric metric = 5;

    ScaleTargetRef scale_target_ref = 6 [json_name = "scale_target_ref"];

    message Behavior {
      repeated ScaleDown scale_down = 1 [json_name = "scale_down"];

      repeated ScaleUp scale_up = 2 [json_name = "scale_up"];

      message ScaleDown {
        // Used to specify which policy should be used. If not set, the default value Max is used.
        string select_policy = 1 [json_name = "select_policy"];

        // Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
        int64 stabilization_window_seconds = 2 [json_name = "stabilization_window_seconds"];

        repeated Policy policy = 3;

        message Policy {
          // Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
          int64 period_seconds = 1 [json_name = "period_seconds"];

          // Type is used to specify the scaling policy: Percent or Pods
          string type = 2;

          // Value contains the amount of change which is permitted by the policy. It must be greater than zero.
          int64 value = 3;
        }
      }

      message ScaleUp {
        // Used to specify which policy should be used. If not set, the default value Max is used.
        string select_policy = 1 [json_name = "select_policy"];

        // Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
        int64 stabilization_window_seconds = 2 [json_name = "stabilization_window_seconds"];

        repeated Policy policy = 3;

        message Policy {
          // Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
          int64 period_seconds = 1 [json_name = "period_seconds"];

          // Type is used to specify the scaling policy: Percent or Pods
          string type = 2;

          // Value contains the amount of change which is permitted by the policy. It must be greater than zero.
          int64 value = 3;
        }
      }
    }

    message Metric {
      // type is the type of metric source. It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
      string type = 1;

      ContainerResource container_resource = 2 [json_name = "container_resource"];

      External external = 3;

      Object object = 4;

      Pods pods = 5;

      Resource resource = 6;

      message ContainerResource {
        // name of the container in the pods of the scaling target
        string container = 1;

        // name of the resource in question
        string name = 2;

        Target target = 3;

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message External {
        Metric metric = 1;

        Target target = 2;

        message Metric {
          // name is the name of the given metric
          string name = 1;

          repeated Selector selector = 2;

          message Selector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message Object {
        DescribedObject described_object = 1 [json_name = "described_object"];

        Metric metric = 2;

        Target target = 3;

        message DescribedObject {
          // API version of the referent
          string api_version = 1 [json_name = "api_version"];

          // Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          string kind = 2;

          // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 3;
        }

        message Metric {
          // name is the name of the given metric
          string name = 1;

          repeated Selector selector = 2;

          message Selector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message Pods {
        Metric metric = 1;

        Target target = 2;

        message Metric {
          // name is the name of the given metric
          string name = 1;

          repeated Selector selector = 2;

          message Selector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message Resource {
        // name is the name of the resource in question.
        string name = 1;

        Target target = 2;

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }
    }

    message ScaleTargetRef {
      // API version of the referent
      string api_version = 1 [json_name = "api_version"];

      // Kind of the referent. e.g. `ReplicationController`. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
      string kind = 2;

      // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      string name = 3;
    }
  }
}

// KubernetesHorizontalPodAutoscalerV2beta2 version is 0
message KubernetesHorizontalPodAutoscalerV2beta2 {
  string id = 1;

  Metadata metadata = 2;

  Spec spec = 3;

  map<string, string> for_each = 4 [json_name = "for_each"];

  repeated string depends_on = 5 [json_name = "depends_on"];

  int32 count = 6;

  string provider = 7;

  terraform.v1.Lifecycle lifecycle = 8;

  message Metadata {
    // An unstructured key value map stored with the horizontal pod autoscaler that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the horizontal pod autoscaler. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the horizontal pod autoscaler, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the horizontal pod autoscaler must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this horizontal pod autoscaler that can be used by clients to determine when horizontal pod autoscaler has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this horizontal pod autoscaler. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }

  message Spec {
    // Upper limit for the number of pods that can be set by the autoscaler.
    int64 max_replicas = 1 [json_name = "max_replicas"];

    // Lower limit for the number of pods that can be set by the autoscaler, defaults to `1`.
    int64 min_replicas = 2 [json_name = "min_replicas"];

    // Target average CPU utilization (represented as a percentage of requested CPU) over all the pods. If not specified the default autoscaling policy will be used.
    int64 target_cpu_utilization_percentage = 3 [json_name = "target_cpu_utilization_percentage"];

    Behavior behavior = 4;

    repeated Metric metric = 5;

    ScaleTargetRef scale_target_ref = 6 [json_name = "scale_target_ref"];

    message Behavior {
      repeated ScaleDown scale_down = 1 [json_name = "scale_down"];

      repeated ScaleUp scale_up = 2 [json_name = "scale_up"];

      message ScaleDown {
        // Used to specify which policy should be used. If not set, the default value Max is used.
        string select_policy = 1 [json_name = "select_policy"];

        // Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
        int64 stabilization_window_seconds = 2 [json_name = "stabilization_window_seconds"];

        repeated Policy policy = 3;

        message Policy {
          // Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
          int64 period_seconds = 1 [json_name = "period_seconds"];

          // Type is used to specify the scaling policy: Percent or Pods
          string type = 2;

          // Value contains the amount of change which is permitted by the policy. It must be greater than zero.
          int64 value = 3;
        }
      }

      message ScaleUp {
        // Used to specify which policy should be used. If not set, the default value Max is used.
        string select_policy = 1 [json_name = "select_policy"];

        // Number of seconds for which past recommendations should be considered while scaling up or scaling down. This value must be greater than or equal to zero and less than or equal to 3600 (one hour). If not set, use the default values: - For scale up: 0 (i.e. no stabilization is done). - For scale down: 300 (i.e. the stabilization window is 300 seconds long).
        int64 stabilization_window_seconds = 2 [json_name = "stabilization_window_seconds"];

        repeated Policy policy = 3;

        message Policy {
          // Period specifies the window of time for which the policy should hold true. PeriodSeconds must be greater than zero and less than or equal to 1800 (30 min).
          int64 period_seconds = 1 [json_name = "period_seconds"];

          // Type is used to specify the scaling policy: Percent or Pods
          string type = 2;

          // Value contains the amount of change which is permitted by the policy. It must be greater than zero.
          int64 value = 3;
        }
      }
    }

    message Metric {
      // type is the type of metric source. It should be one of "ContainerResource", "External", "Object", "Pods" or "Resource", each mapping to a matching field in the object. Note: "ContainerResource" type is available on when the feature-gate HPAContainerMetrics is enabled
      string type = 1;

      ContainerResource container_resource = 2 [json_name = "container_resource"];

      External external = 3;

      Object object = 4;

      Pods pods = 5;

      Resource resource = 6;

      message ContainerResource {
        // name of the container in the pods of the scaling target
        string container = 1;

        // name of the resource in question
        string name = 2;

        Target target = 3;

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message External {
        Metric metric = 1;

        Target target = 2;

        message Metric {
          // name is the name of the given metric
          string name = 1;

          repeated Selector selector = 2;

          message Selector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message Object {
        DescribedObject described_object = 1 [json_name = "described_object"];

        Metric metric = 2;

        Target target = 3;

        message DescribedObject {
          // API version of the referent
          string api_version = 1 [json_name = "api_version"];

          // Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
          string kind = 2;

          // Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
          string name = 3;
        }

        message Metric {
          // name is the name of the given metric
          string name = 1;

          repeated Selector selector = 2;

          message Selector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message Pods {
        Metric metric = 1;

        Target target = 2;

        message Metric {
          // name is the name of the given metric
          string name = 1;

          repeated Selector selector = 2;

          message Selector {
            // A map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of `match_expressions`, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
            map<string, string> match_labels = 1 [json_name = "match_labels"];

            repeated MatchExpressions match_expressions = 2 [json_name = "match_expressions"];

            message MatchExpressions {
              // The label key that the selector applies to.
              string key = 1;

              // A key's relationship to a set of values. Valid operators ard `In`, `NotIn`, `Exists` and `DoesNotExist`.
              string operator = 2;

              // An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the values array must be empty. This array is replaced during a strategic merge patch.
              repeated string values = 3;
            }
          }
        }

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }

      message Resource {
        // name is the name of the resource in question.
        string name = 1;

        Target target = 2;

        message Target {
          // averageUtilization is the target value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods. Currently only valid for Resource metric source type
          int64 average_utilization = 1 [json_name = "average_utilization"];

          // averageValue is the target value of the average of the metric across all relevant pods (as a quantity)
          string average_value = 2 [json_name = "average_value"];

          // type represents whether the metric type is Utilization, Value, or AverageValue
          string type = 3;

          // value is the target value of the metric (as a quantity).
          string value = 4;
        }
      }
    }

    message ScaleTargetRef {
      // API version of the referent
      string api_version = 1 [json_name = "api_version"];

      // Kind of the referent. e.g. `ReplicationController`. More info: http://releases.k8s.io/HEAD/docs/devel/api-conventions.md#types-kinds
      string kind = 2;

      // Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names
      string name = 3;
    }
  }
}
