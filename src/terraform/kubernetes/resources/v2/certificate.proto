syntax = "proto3";

// Provider: kubernetes 2.20.0
package terraform.kubernetes.resources.v2;

import "terraform/v1/meta.proto";

// KubernetesCertificateSigningRequest version is 0
message KubernetesCertificateSigningRequest {
  // Automatically approve the CertificateSigningRequest
  bool auto_approve = 1 [json_name = "auto_approve"];

  // If request was approved, the controller will place the issued certificate here.
  string certificate = 2;

  string id = 3;

  Metadata metadata = 4;

  Spec spec = 5;

  repeated Timeouts timeouts = 6;

  map<string, string> for_each = 7 [json_name = "for_each"];

  repeated string depends_on = 8 [json_name = "depends_on"];

  int32 count = 9;

  string provider = 10;

  terraform.v1.Lifecycle lifecycle = 11;

  message Metadata {
    // An unstructured key value map stored with the certificate signing request that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the certificate signing request. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the certificate signing request, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // An opaque value that represents the internal version of this certificate signing request that can be used by clients to determine when certificate signing request has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 6 [json_name = "resource_version"];

    // The unique in time and space value for this certificate signing request. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 7;
  }

  message Spec {
    // Base64-encoded PKCS#10 CSR data
    string request = 1;

    // Requested signer for the request. It is a qualified name in the form: `scope-hostname.io/name`.If empty, it will be defaulted: 1. If it's a kubelet client certificate, it is assigned `kubernetes.io/kube-apiserver-client-kubelet`.2. If it's a kubelet serving certificate, it is assigned `kubernetes.io/kubelet-serving`.3. Otherwise, it is assigned `kubernetes.io/legacy-unknown`. Distribution of trust for signers happens out of band.You can select on this field using `spec.signerName`.
    string signer_name = 2 [json_name = "signer_name"];

    // allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
    //     https://tools.ietf.org/html/rfc5280#section-4.2.1.12
    // Valid values are:
    // "signing",
    // "digital signature",
    // "content commitment",
    // "key encipherment",
    // "key agreement",
    // "data encipherment",
    // "cert sign",
    // "crl sign",
    // "encipher only",
    // "decipher only",
    // "any",
    // "server auth",
    // "client auth",
    // "code signing",
    // "email protection",
    // "s/mime",
    // "ipsec end system",
    // "ipsec tunnel",
    // "ipsec user",
    // "timestamping",
    // "ocsp signing",
    // "microsoft sgc",
    // "netscape sgc"
    repeated string usages = 3;
  }

  message Timeouts {
    string create = 1;
  }
}

// KubernetesCertificateSigningRequestV1 version is 0
message KubernetesCertificateSigningRequestV1 {
  // Automatically approve the CertificateSigningRequest
  bool auto_approve = 1 [json_name = "auto_approve"];

  // certificate is populated with an issued certificate by the signer after an Approved condition is present. This field is set via the /status subresource. Once populated, this field is immutable.
  //
  // If the certificate signing request is denied, a condition of type "Denied" is added and this field remains empty. If the signer cannot issue the certificate, a condition of type "Failed" is added and this field remains empty.
  //
  // Validation requirements:
  // 1. certificate must contain one or more PEM blocks.
  // 2. All PEM blocks must have the "CERTIFICATE" label, contain no headers, and the encoded data
  //  must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.
  // 3. Non-PEM content may appear before or after the "CERTIFICATE" PEM blocks and is unvalidated,
  //  to allow for explanatory text as described in section 5.2 of RFC7468.
  //
  // If more than one PEM block is present, and the definition of the requested spec.signerName does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.
  //
  // The certificate is encoded in PEM format.
  //
  // When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:
  //
  //    base64(
  string certificate = 2;

  string id = 3;

  Metadata metadata = 4;

  Spec spec = 5;

  repeated Timeouts timeouts = 6;

  map<string, string> for_each = 7 [json_name = "for_each"];

  repeated string depends_on = 8 [json_name = "depends_on"];

  int32 count = 9;

  string provider = 10;

  terraform.v1.Lifecycle lifecycle = 11;

  message Metadata {
    // An unstructured key value map stored with the certificate signing request that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the certificate signing request. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the certificate signing request, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // An opaque value that represents the internal version of this certificate signing request that can be used by clients to determine when certificate signing request has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 6 [json_name = "resource_version"];

    // The unique in time and space value for this certificate signing request. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 7;
  }

  message Spec {
    // request contains an x509 certificate signing request encoded in a "CERTIFICATE REQUEST" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.
    string request = 1;

    // signerName indicates the requested signer, and is a qualified name.
    //
    // List/watch requests for CertificateSigningRequests can filter on this field using a "spec.signerName=NAME" fieldSelector.
    //
    // Well-known Kubernetes signers are:
    // 1. "kubernetes.io/kube-apiserver-client": issues client certificates that can be used to authenticate to kube-apiserver.
    //  Requests for this signer are never auto-approved by kube-controller-manager, can be issued by the "csrsigning" controller in kube-controller-manager.
    // 2. "kubernetes.io/kube-apiserver-client-kubelet": issues client certificates that kubelets use to authenticate to kube-apiserver.
    //  Requests for this signer can be auto-approved by the "csrapproving" controller in kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
    // 3. "kubernetes.io/kubelet-serving" issues serving certificates that kubelets use to serve TLS endpoints, which kube-apiserver can connect to securely.
    //  Requests for this signer are never auto-approved by kube-controller-manager, and can be issued by the "csrsigning" controller in kube-controller-manager.
    //
    // More details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers
    //
    // Custom signerNames can also be specified. The signer defines:
    // 1. Trust distribution: how trust (CA bundles) are distributed.
    // 2. Permitted subjects: and behavior when a disallowed subject is requested.
    // 3. Required, permitted, or forbidden x509 extensions in the request (including whether subjectAltNames are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.
    // 4. Required, permitted, or forbidden key usages / extended key usages.
    // 5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.
    // 6. Whether or not requests for CA certificates are allowed.
    string signer_name = 2 [json_name = "signer_name"];

    // usages specifies a set of key usages requested in the issued certificate.
    //
    // Requests for TLS client certificates typically request: "digital signature", "key encipherment", "client auth".
    //
    // Requests for TLS serving certificates typically request: "key encipherment", "digital signature", "server auth".
    //
    // Valid values are:
    // "signing", "digital signature", "content commitment",
    // "key encipherment", "key agreement", "data encipherment",
    // "cert sign", "crl sign", "encipher only", "decipher only", "any",
    // "server auth", "client auth",
    // "code signing", "email protection", "s/mime",
    // "ipsec end system", "ipsec tunnel", "ipsec user",
    // "timestamping", "ocsp signing", "microsoft sgc", "netscape sgc"
    repeated string usages = 3;
  }

  message Timeouts {
    string create = 1;
  }
}
