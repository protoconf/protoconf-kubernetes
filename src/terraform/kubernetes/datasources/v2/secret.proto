syntax = "proto3";

// Provider: kubernetes 2.20.0
package terraform.kubernetes.datasources.v2;

import "terraform/v1/meta.proto";

// KubernetesSecret version is 0
message KubernetesSecret {
  // A map of the secret data with values encoded in base64 format
  map<string, string> binary_data = 1 [json_name = "binary_data"];

  // A map of the secret data.
  map<string, string> data = 2;

  string id = 3;

  // Ensures that data stored in the Secret cannot be updated (only object metadata can be modified).
  bool immutable = 4;

  // Type of secret
  string type = 5;

  Metadata metadata = 6;

  map<string, string> for_each = 7 [json_name = "for_each"];

  repeated string depends_on = 8 [json_name = "depends_on"];

  int32 count = 9;

  string provider = 10;

  terraform.v1.Lifecycle lifecycle = 11;

  message Metadata {
    // An unstructured key value map stored with the secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the secret, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the secret must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this secret that can be used by clients to determine when secret has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this secret. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }
}

// KubernetesSecretV1 version is 0
message KubernetesSecretV1 {
  // A map of the secret data with values encoded in base64 format
  map<string, string> binary_data = 1 [json_name = "binary_data"];

  // A map of the secret data.
  map<string, string> data = 2;

  string id = 3;

  // Ensures that data stored in the Secret cannot be updated (only object metadata can be modified).
  bool immutable = 4;

  // Type of secret
  string type = 5;

  Metadata metadata = 6;

  map<string, string> for_each = 7 [json_name = "for_each"];

  repeated string depends_on = 8 [json_name = "depends_on"];

  int32 count = 9;

  string provider = 10;

  terraform.v1.Lifecycle lifecycle = 11;

  message Metadata {
    // An unstructured key value map stored with the secret that may be used to store arbitrary metadata. More info: http://kubernetes.io/docs/user-guide/annotations
    map<string, string> annotations = 1;

    // Prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. This value will also be combined with a unique suffix. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#idempotency
    string generate_name = 2 [json_name = "generate_name"];

    // A sequence number representing a specific generation of the desired state.
    int64 generation = 3;

    // Map of string keys and values that can be used to organize and categorize (scope and select) the secret. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels
    map<string, string> labels = 4;

    // Name of the secret, must be unique. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names
    string name = 5;

    // Namespace defines the space within which name of the secret must be unique.
    string namespace = 6;

    // An opaque value that represents the internal version of this secret that can be used by clients to determine when secret has changed. Read more: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
    string resource_version = 7 [json_name = "resource_version"];

    // The unique in time and space value for this secret. More info: http://kubernetes.io/docs/user-guide/identifiers#uids
    string uid = 8;
  }
}
